
zl_firmware_STMF103C8Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d40  08003d40  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003d40  08003d40  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d40  08003d40  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000088  08003dd0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003dd0  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3ce  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023dd  00000000  00000000  0002e47f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  00031268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018cc5  00000000  00000000  00031b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a646  00000000  00000000  0004a80d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000892d4  00000000  00000000  00054e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  000de1a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ce8 	.word	0x08003ce8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003ce8 	.word	0x08003ce8

0800014c <emka_fotodetector_init>:


#include "emka_fotodetector.h"

fotodetector_config emka_fotodetector_init(ADC_HandleTypeDef *adc_handler)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	fotodetector_config fd_conf;

	fd_conf.adc_handler = adc_handler;
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	60bb      	str	r3, [r7, #8]

	return (fd_conf);
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	461a      	mov	r2, r3
 800015e:	f107 0308 	add.w	r3, r7, #8
 8000162:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000166:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	3714      	adds	r7, #20
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr

08000174 <fd_sensor_start>:

void fd_sensor_start(fotodetector_config fd_config)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	463b      	mov	r3, r7
 800017c:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_ADC_Start_IT(fd_config.adc_handler);
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	4618      	mov	r0, r3
 8000184:	f001 f9dc 	bl	8001540 <HAL_ADC_Start_IT>
}
 8000188:	bf00      	nop
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}

08000190 <emka_clock_system_init>:
};



void emka_clock_system_init(SPI_HandleTypeDef * spi_handler)
{
 8000190:	b590      	push	{r4, r7, lr}
 8000192:	b087      	sub	sp, #28
 8000194:	af00      	add	r7, sp, #0
 8000196:	6178      	str	r0, [r7, #20]
	init_led_colors();
 8000198:	f000 f828 	bl	80001ec <init_led_colors>
	ws2812b = ws2812b_init(spi_handler, led_count);
 800019c:	4c0e      	ldr	r4, [pc, #56]	; (80001d8 <emka_clock_system_init+0x48>)
 800019e:	463b      	mov	r3, r7
 80001a0:	223a      	movs	r2, #58	; 0x3a
 80001a2:	6979      	ldr	r1, [r7, #20]
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 ff3b 	bl	8001020 <ws2812b_init>
 80001aa:	463b      	mov	r3, r7
 80001ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	dots = 0;
 80001b4:	4b09      	ldr	r3, [pc, #36]	; (80001dc <emka_clock_system_init+0x4c>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	701a      	strb	r2, [r3, #0]
	current_led_color = led_color[1];
 80001ba:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <emka_clock_system_init+0x50>)
 80001bc:	4b09      	ldr	r3, [pc, #36]	; (80001e4 <emka_clock_system_init+0x54>)
 80001be:	3303      	adds	r3, #3
 80001c0:	8819      	ldrh	r1, [r3, #0]
 80001c2:	789b      	ldrb	r3, [r3, #2]
 80001c4:	8011      	strh	r1, [r2, #0]
 80001c6:	7093      	strb	r3, [r2, #2]
	color_switch_flag = 0;
 80001c8:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <emka_clock_system_init+0x58>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]
}
 80001ce:	bf00      	nop
 80001d0:	371c      	adds	r7, #28
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd90      	pop	{r4, r7, pc}
 80001d6:	bf00      	nop
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	200000c3 	.word	0x200000c3
 80001e0:	200000bc 	.word	0x200000bc
 80001e4:	200000dc 	.word	0x200000dc
 80001e8:	200000b8 	.word	0x200000b8

080001ec <init_led_colors>:

void init_led_colors(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	//BLANK
		led_color[0].red = 00;
 80001f0:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <init_led_colors+0xc0>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	701a      	strb	r2, [r3, #0]
		led_color[0].green = 00;
 80001f6:	4b2d      	ldr	r3, [pc, #180]	; (80002ac <init_led_colors+0xc0>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	705a      	strb	r2, [r3, #1]
		led_color[0].blue = 00;
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <init_led_colors+0xc0>)
 80001fe:	2200      	movs	r2, #0
 8000200:	709a      	strb	r2, [r3, #2]

		//BIALY
		led_color[1].red = 150;
 8000202:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <init_led_colors+0xc0>)
 8000204:	2296      	movs	r2, #150	; 0x96
 8000206:	70da      	strb	r2, [r3, #3]
		led_color[1].green = 150;
 8000208:	4b28      	ldr	r3, [pc, #160]	; (80002ac <init_led_colors+0xc0>)
 800020a:	2296      	movs	r2, #150	; 0x96
 800020c:	711a      	strb	r2, [r3, #4]
		led_color[1].blue = 150;
 800020e:	4b27      	ldr	r3, [pc, #156]	; (80002ac <init_led_colors+0xc0>)
 8000210:	2296      	movs	r2, #150	; 0x96
 8000212:	715a      	strb	r2, [r3, #5]

		//CZERWONY
		led_color[2].red = 100;
 8000214:	4b25      	ldr	r3, [pc, #148]	; (80002ac <init_led_colors+0xc0>)
 8000216:	2264      	movs	r2, #100	; 0x64
 8000218:	719a      	strb	r2, [r3, #6]
		led_color[2].green = 000;
 800021a:	4b24      	ldr	r3, [pc, #144]	; (80002ac <init_led_colors+0xc0>)
 800021c:	2200      	movs	r2, #0
 800021e:	71da      	strb	r2, [r3, #7]
		led_color[2].blue = 00;
 8000220:	4b22      	ldr	r3, [pc, #136]	; (80002ac <init_led_colors+0xc0>)
 8000222:	2200      	movs	r2, #0
 8000224:	721a      	strb	r2, [r3, #8]

		//ZIELONY
		led_color[3].red = 150;
 8000226:	4b21      	ldr	r3, [pc, #132]	; (80002ac <init_led_colors+0xc0>)
 8000228:	2296      	movs	r2, #150	; 0x96
 800022a:	725a      	strb	r2, [r3, #9]
		led_color[3].green = 0;
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <init_led_colors+0xc0>)
 800022e:	2200      	movs	r2, #0
 8000230:	729a      	strb	r2, [r3, #10]
		led_color[3].blue = 100;
 8000232:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <init_led_colors+0xc0>)
 8000234:	2264      	movs	r2, #100	; 0x64
 8000236:	72da      	strb	r2, [r3, #11]

		//NIEBIESKI
		led_color[4].red = 00;
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <init_led_colors+0xc0>)
 800023a:	2200      	movs	r2, #0
 800023c:	731a      	strb	r2, [r3, #12]
		led_color[4].green = 00;
 800023e:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <init_led_colors+0xc0>)
 8000240:	2200      	movs	r2, #0
 8000242:	735a      	strb	r2, [r3, #13]
		led_color[4].blue = 100;
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <init_led_colors+0xc0>)
 8000246:	2264      	movs	r2, #100	; 0x64
 8000248:	739a      	strb	r2, [r3, #14]

		//
		led_color[5].red = 100;
 800024a:	4b18      	ldr	r3, [pc, #96]	; (80002ac <init_led_colors+0xc0>)
 800024c:	2264      	movs	r2, #100	; 0x64
 800024e:	73da      	strb	r2, [r3, #15]
		led_color[5].green = 100;
 8000250:	4b16      	ldr	r3, [pc, #88]	; (80002ac <init_led_colors+0xc0>)
 8000252:	2264      	movs	r2, #100	; 0x64
 8000254:	741a      	strb	r2, [r3, #16]
		led_color[5].blue = 00;
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <init_led_colors+0xc0>)
 8000258:	2200      	movs	r2, #0
 800025a:	745a      	strb	r2, [r3, #17]

		//
		led_color[6].red = 100;
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <init_led_colors+0xc0>)
 800025e:	2264      	movs	r2, #100	; 0x64
 8000260:	749a      	strb	r2, [r3, #18]
		led_color[6].green = 00;
 8000262:	4b12      	ldr	r3, [pc, #72]	; (80002ac <init_led_colors+0xc0>)
 8000264:	2200      	movs	r2, #0
 8000266:	74da      	strb	r2, [r3, #19]
		led_color[6].blue = 100;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <init_led_colors+0xc0>)
 800026a:	2264      	movs	r2, #100	; 0x64
 800026c:	751a      	strb	r2, [r3, #20]

		//
		led_color[7].red = 00;
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <init_led_colors+0xc0>)
 8000270:	2200      	movs	r2, #0
 8000272:	755a      	strb	r2, [r3, #21]
		led_color[7].green = 100;
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <init_led_colors+0xc0>)
 8000276:	2264      	movs	r2, #100	; 0x64
 8000278:	759a      	strb	r2, [r3, #22]
		led_color[7].blue = 100;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <init_led_colors+0xc0>)
 800027c:	2264      	movs	r2, #100	; 0x64
 800027e:	75da      	strb	r2, [r3, #23]

		//
		led_color[8].red = 50;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <init_led_colors+0xc0>)
 8000282:	2232      	movs	r2, #50	; 0x32
 8000284:	761a      	strb	r2, [r3, #24]
		led_color[8].green = 100;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <init_led_colors+0xc0>)
 8000288:	2264      	movs	r2, #100	; 0x64
 800028a:	765a      	strb	r2, [r3, #25]
		led_color[8].blue = 150;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <init_led_colors+0xc0>)
 800028e:	2296      	movs	r2, #150	; 0x96
 8000290:	769a      	strb	r2, [r3, #26]

		//
		led_color[9].red = 150;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <init_led_colors+0xc0>)
 8000294:	2296      	movs	r2, #150	; 0x96
 8000296:	76da      	strb	r2, [r3, #27]
		led_color[9].green = 100;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <init_led_colors+0xc0>)
 800029a:	2264      	movs	r2, #100	; 0x64
 800029c:	771a      	strb	r2, [r3, #28]
		led_color[9].blue = 50;
 800029e:	4b03      	ldr	r3, [pc, #12]	; (80002ac <init_led_colors+0xc0>)
 80002a0:	2232      	movs	r2, #50	; 0x32
 80002a2:	775a      	strb	r2, [r3, #29]


}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	200000dc 	.word	0x200000dc

080002b0 <update_display_number>:


void update_display_number(uint16_t number)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]
	unsigned char D1, D2, D3, D4;

	if (number <= 9999)
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d83e      	bhi.n	8000342 <update_display_number+0x92>
	{
		 D1 = number/1000;
 80002c4:	88fb      	ldrh	r3, [r7, #6]
 80002c6:	4a27      	ldr	r2, [pc, #156]	; (8000364 <update_display_number+0xb4>)
 80002c8:	fba2 2303 	umull	r2, r3, r2, r3
 80002cc:	099b      	lsrs	r3, r3, #6
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	73fb      	strb	r3, [r7, #15]
		 number -= D1 * 1000;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	0192      	lsls	r2, r2, #6
 80002da:	1ad2      	subs	r2, r2, r3
 80002dc:	0192      	lsls	r2, r2, #6
 80002de:	441a      	add	r2, r3
 80002e0:	0052      	lsls	r2, r2, #1
 80002e2:	4413      	add	r3, r2
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	4413      	add	r3, r2
 80002ec:	80fb      	strh	r3, [r7, #6]
		 D2 = number / 100;
 80002ee:	88fb      	ldrh	r3, [r7, #6]
 80002f0:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <update_display_number+0xb8>)
 80002f2:	fba2 2303 	umull	r2, r3, r2, r3
 80002f6:	095b      	lsrs	r3, r3, #5
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	73bb      	strb	r3, [r7, #14]
		 number -= D2 * 100;
 80002fc:	7bbb      	ldrb	r3, [r7, #14]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	461a      	mov	r2, r3
 8000302:	0252      	lsls	r2, r2, #9
 8000304:	1ad2      	subs	r2, r2, r3
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	441a      	add	r2, r3
 800030a:	00d2      	lsls	r2, r2, #3
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	b29a      	uxth	r2, r3
 8000312:	88fb      	ldrh	r3, [r7, #6]
 8000314:	4413      	add	r3, r2
 8000316:	80fb      	strh	r3, [r7, #6]
		 D3 = number / 10;
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	4a14      	ldr	r2, [pc, #80]	; (800036c <update_display_number+0xbc>)
 800031c:	fba2 2303 	umull	r2, r3, r2, r3
 8000320:	08db      	lsrs	r3, r3, #3
 8000322:	b29b      	uxth	r3, r3
 8000324:	737b      	strb	r3, [r7, #13]
		 number -= D3 * 10;
 8000326:	7b7b      	ldrb	r3, [r7, #13]
 8000328:	b29b      	uxth	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	0352      	lsls	r2, r2, #13
 800032e:	1ad2      	subs	r2, r2, r3
 8000330:	0092      	lsls	r2, r2, #2
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	b29a      	uxth	r2, r3
 8000338:	88fb      	ldrh	r3, [r7, #6]
 800033a:	4413      	add	r3, r2
 800033c:	80fb      	strh	r3, [r7, #6]
		 D4 = number;
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	733b      	strb	r3, [r7, #12]
	}


	display_number[0] = D4;
 8000342:	4a0b      	ldr	r2, [pc, #44]	; (8000370 <update_display_number+0xc0>)
 8000344:	7b3b      	ldrb	r3, [r7, #12]
 8000346:	7013      	strb	r3, [r2, #0]
	display_number[1] = D3;
 8000348:	4a09      	ldr	r2, [pc, #36]	; (8000370 <update_display_number+0xc0>)
 800034a:	7b7b      	ldrb	r3, [r7, #13]
 800034c:	7053      	strb	r3, [r2, #1]
	display_number[2] = D2;
 800034e:	4a08      	ldr	r2, [pc, #32]	; (8000370 <update_display_number+0xc0>)
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	7093      	strb	r3, [r2, #2]
	display_number[3] = D1;
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <update_display_number+0xc0>)
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	70d3      	strb	r3, [r2, #3]
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	10624dd3 	.word	0x10624dd3
 8000368:	51eb851f 	.word	0x51eb851f
 800036c:	cccccccd 	.word	0xcccccccd
 8000370:	20000014 	.word	0x20000014

08000374 <update_display_time>:

void update_display_time(char godz, char min)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	460a      	mov	r2, r1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	4613      	mov	r3, r2
 8000382:	71bb      	strb	r3, [r7, #6]
	unsigned char D1, D2, D3, D4;

		 D1 = godz / 10;
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <update_display_time+0x78>)
 8000388:	fba2 2303 	umull	r2, r3, r2, r3
 800038c:	08db      	lsrs	r3, r3, #3
 800038e:	73fb      	strb	r3, [r7, #15]

		 D2 = godz % 10;
 8000390:	79fa      	ldrb	r2, [r7, #7]
 8000392:	4b16      	ldr	r3, [pc, #88]	; (80003ec <update_display_time+0x78>)
 8000394:	fba3 1302 	umull	r1, r3, r3, r2
 8000398:	08d9      	lsrs	r1, r3, #3
 800039a:	460b      	mov	r3, r1
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	440b      	add	r3, r1
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	73bb      	strb	r3, [r7, #14]

		 D3 = min / 10;
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <update_display_time+0x78>)
 80003aa:	fba2 2303 	umull	r2, r3, r2, r3
 80003ae:	08db      	lsrs	r3, r3, #3
 80003b0:	737b      	strb	r3, [r7, #13]

		 D4 = min % 10;
 80003b2:	79ba      	ldrb	r2, [r7, #6]
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <update_display_time+0x78>)
 80003b6:	fba3 1302 	umull	r1, r3, r3, r2
 80003ba:	08d9      	lsrs	r1, r3, #3
 80003bc:	460b      	mov	r3, r1
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	440b      	add	r3, r1
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	733b      	strb	r3, [r7, #12]


		display_number[0] = D4;
 80003c8:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <update_display_time+0x7c>)
 80003ca:	7b3b      	ldrb	r3, [r7, #12]
 80003cc:	7013      	strb	r3, [r2, #0]
		display_number[1] = D3;
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <update_display_time+0x7c>)
 80003d0:	7b7b      	ldrb	r3, [r7, #13]
 80003d2:	7053      	strb	r3, [r2, #1]
		display_number[2] = D2;
 80003d4:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <update_display_time+0x7c>)
 80003d6:	7bbb      	ldrb	r3, [r7, #14]
 80003d8:	7093      	strb	r3, [r2, #2]
		display_number[3] = D1;
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <update_display_time+0x7c>)
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	70d3      	strb	r3, [r2, #3]
}
 80003e0:	bf00      	nop
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	cccccccd 	.word	0xcccccccd
 80003f0:	20000014 	.word	0x20000014

080003f4 <set_led_buffer>:

void set_led_buffer(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
	  for(int dig_cnt = 0 ; dig_cnt < 2 ; dig_cnt ++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	e052      	b.n	80004a6 <set_led_buffer+0xb2>
	  {
		  for (int bit_cnt = 0 ; bit_cnt < 14 ; bit_cnt ++)
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	e049      	b.n	800049a <set_led_buffer+0xa6>
		  {
			  if (binary_coded_digit[display_number[dig_cnt]] & (1<<bit_cnt))
 8000406:	4a7c      	ldr	r2, [pc, #496]	; (80005f8 <set_led_buffer+0x204>)
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4413      	add	r3, r2
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	461a      	mov	r2, r3
 8000410:	4b7a      	ldr	r3, [pc, #488]	; (80005fc <set_led_buffer+0x208>)
 8000412:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000416:	461a      	mov	r2, r3
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	fa42 f303 	asr.w	r3, r2, r3
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	2b00      	cmp	r3, #0
 8000424:	d01b      	beq.n	800045e <set_led_buffer+0x6a>
			  {
				  ws2812b_set_diode_color(&ws2812b, ( (dig_cnt*14) + bit_cnt), lumed_curr_led_color);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	b29b      	uxth	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	00d2      	lsls	r2, r2, #3
 800042e:	1ad3      	subs	r3, r2, r3
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	b29a      	uxth	r2, r3
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	b29b      	uxth	r3, r3
 8000438:	4413      	add	r3, r2
 800043a:	b298      	uxth	r0, r3
 800043c:	4b70      	ldr	r3, [pc, #448]	; (8000600 <set_led_buffer+0x20c>)
 800043e:	781a      	ldrb	r2, [r3, #0]
 8000440:	7859      	ldrb	r1, [r3, #1]
 8000442:	0209      	lsls	r1, r1, #8
 8000444:	430a      	orrs	r2, r1
 8000446:	789b      	ldrb	r3, [r3, #2]
 8000448:	041b      	lsls	r3, r3, #16
 800044a:	431a      	orrs	r2, r3
 800044c:	2300      	movs	r3, #0
 800044e:	f362 0317 	bfi	r3, r2, #0, #24
 8000452:	461a      	mov	r2, r3
 8000454:	4601      	mov	r1, r0
 8000456:	486b      	ldr	r0, [pc, #428]	; (8000604 <set_led_buffer+0x210>)
 8000458:	f000 fe00 	bl	800105c <ws2812b_set_diode_color>
 800045c:	e01a      	b.n	8000494 <set_led_buffer+0xa0>
			  }
			  else
			  {
				  ws2812b_set_diode_color(&ws2812b, ( (dig_cnt*14) + bit_cnt), led_color[0]);
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	b29b      	uxth	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	00d2      	lsls	r2, r2, #3
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	b29a      	uxth	r2, r3
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	b29b      	uxth	r3, r3
 8000470:	4413      	add	r3, r2
 8000472:	b298      	uxth	r0, r3
 8000474:	4b64      	ldr	r3, [pc, #400]	; (8000608 <set_led_buffer+0x214>)
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	7859      	ldrb	r1, [r3, #1]
 800047a:	0209      	lsls	r1, r1, #8
 800047c:	430a      	orrs	r2, r1
 800047e:	789b      	ldrb	r3, [r3, #2]
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	431a      	orrs	r2, r3
 8000484:	2300      	movs	r3, #0
 8000486:	f362 0317 	bfi	r3, r2, #0, #24
 800048a:	461a      	mov	r2, r3
 800048c:	4601      	mov	r1, r0
 800048e:	485d      	ldr	r0, [pc, #372]	; (8000604 <set_led_buffer+0x210>)
 8000490:	f000 fde4 	bl	800105c <ws2812b_set_diode_color>
		  for (int bit_cnt = 0 ; bit_cnt < 14 ; bit_cnt ++)
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	3301      	adds	r3, #1
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	2b0d      	cmp	r3, #13
 800049e:	ddb2      	ble.n	8000406 <set_led_buffer+0x12>
	  for(int dig_cnt = 0 ; dig_cnt < 2 ; dig_cnt ++)
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	3301      	adds	r3, #1
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	dda9      	ble.n	8000400 <set_led_buffer+0xc>
			  }
		  }
	  }

	  for(int dig_cnt = 2 ; dig_cnt < 4 ; dig_cnt ++)
 80004ac:	2302      	movs	r3, #2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	e056      	b.n	8000560 <set_led_buffer+0x16c>
	  {
		  for (int bit_cnt = 0 ; bit_cnt < 14 ; bit_cnt ++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	e04d      	b.n	8000554 <set_led_buffer+0x160>
		  {
			  if (binary_coded_digit[display_number[dig_cnt]] & (1<<bit_cnt))
 80004b8:	4a4f      	ldr	r2, [pc, #316]	; (80005f8 <set_led_buffer+0x204>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b4e      	ldr	r3, [pc, #312]	; (80005fc <set_led_buffer+0x208>)
 80004c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80004c8:	461a      	mov	r2, r3
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	fa42 f303 	asr.w	r3, r2, r3
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d01d      	beq.n	8000514 <set_led_buffer+0x120>
			  {
				  ws2812b_set_diode_color(&ws2812b, ( (dig_cnt*14) + bit_cnt) + 2, lumed_curr_led_color);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	00d2      	lsls	r2, r2, #3
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	4413      	add	r3, r2
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	3302      	adds	r3, #2
 80004f0:	b298      	uxth	r0, r3
 80004f2:	4b43      	ldr	r3, [pc, #268]	; (8000600 <set_led_buffer+0x20c>)
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	7859      	ldrb	r1, [r3, #1]
 80004f8:	0209      	lsls	r1, r1, #8
 80004fa:	430a      	orrs	r2, r1
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	041b      	lsls	r3, r3, #16
 8000500:	431a      	orrs	r2, r3
 8000502:	2300      	movs	r3, #0
 8000504:	f362 0317 	bfi	r3, r2, #0, #24
 8000508:	461a      	mov	r2, r3
 800050a:	4601      	mov	r1, r0
 800050c:	483d      	ldr	r0, [pc, #244]	; (8000604 <set_led_buffer+0x210>)
 800050e:	f000 fda5 	bl	800105c <ws2812b_set_diode_color>
 8000512:	e01c      	b.n	800054e <set_led_buffer+0x15a>
			  }
			  else
			  {
				  ws2812b_set_diode_color(&ws2812b, ( (dig_cnt*14) + bit_cnt) + 2, led_color[0]);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	b29b      	uxth	r3, r3
 8000518:	461a      	mov	r2, r3
 800051a:	00d2      	lsls	r2, r2, #3
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	b29a      	uxth	r2, r3
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	b29b      	uxth	r3, r3
 8000526:	4413      	add	r3, r2
 8000528:	b29b      	uxth	r3, r3
 800052a:	3302      	adds	r3, #2
 800052c:	b298      	uxth	r0, r3
 800052e:	4b36      	ldr	r3, [pc, #216]	; (8000608 <set_led_buffer+0x214>)
 8000530:	781a      	ldrb	r2, [r3, #0]
 8000532:	7859      	ldrb	r1, [r3, #1]
 8000534:	0209      	lsls	r1, r1, #8
 8000536:	430a      	orrs	r2, r1
 8000538:	789b      	ldrb	r3, [r3, #2]
 800053a:	041b      	lsls	r3, r3, #16
 800053c:	431a      	orrs	r2, r3
 800053e:	2300      	movs	r3, #0
 8000540:	f362 0317 	bfi	r3, r2, #0, #24
 8000544:	461a      	mov	r2, r3
 8000546:	4601      	mov	r1, r0
 8000548:	482e      	ldr	r0, [pc, #184]	; (8000604 <set_led_buffer+0x210>)
 800054a:	f000 fd87 	bl	800105c <ws2812b_set_diode_color>
		  for (int bit_cnt = 0 ; bit_cnt < 14 ; bit_cnt ++)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	2b0d      	cmp	r3, #13
 8000558:	ddae      	ble.n	80004b8 <set_led_buffer+0xc4>
	  for(int dig_cnt = 2 ; dig_cnt < 4 ; dig_cnt ++)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3301      	adds	r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b03      	cmp	r3, #3
 8000564:	dda5      	ble.n	80004b2 <set_led_buffer+0xbe>
			  }
		  }
	  }


	  if (dots == 1)
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <set_led_buffer+0x218>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d120      	bne.n	80005b0 <set_led_buffer+0x1bc>
	  {
		  ws2812b_set_diode_color(&ws2812b,28, lumed_curr_led_color);
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <set_led_buffer+0x20c>)
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	7859      	ldrb	r1, [r3, #1]
 8000574:	0209      	lsls	r1, r1, #8
 8000576:	430a      	orrs	r2, r1
 8000578:	789b      	ldrb	r3, [r3, #2]
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	431a      	orrs	r2, r3
 800057e:	2300      	movs	r3, #0
 8000580:	f362 0317 	bfi	r3, r2, #0, #24
 8000584:	461a      	mov	r2, r3
 8000586:	211c      	movs	r1, #28
 8000588:	481e      	ldr	r0, [pc, #120]	; (8000604 <set_led_buffer+0x210>)
 800058a:	f000 fd67 	bl	800105c <ws2812b_set_diode_color>
	  	  ws2812b_set_diode_color(&ws2812b,29, lumed_curr_led_color);
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <set_led_buffer+0x20c>)
 8000590:	781a      	ldrb	r2, [r3, #0]
 8000592:	7859      	ldrb	r1, [r3, #1]
 8000594:	0209      	lsls	r1, r1, #8
 8000596:	430a      	orrs	r2, r1
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	041b      	lsls	r3, r3, #16
 800059c:	431a      	orrs	r2, r3
 800059e:	2300      	movs	r3, #0
 80005a0:	f362 0317 	bfi	r3, r2, #0, #24
 80005a4:	461a      	mov	r2, r3
 80005a6:	211d      	movs	r1, #29
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <set_led_buffer+0x210>)
 80005aa:	f000 fd57 	bl	800105c <ws2812b_set_diode_color>
		  ws2812b_set_diode_color(&ws2812b,28, led_color[0]);
		  ws2812b_set_diode_color(&ws2812b,29, led_color[0]);
	  }


}
 80005ae:	e01f      	b.n	80005f0 <set_led_buffer+0x1fc>
		  ws2812b_set_diode_color(&ws2812b,28, led_color[0]);
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <set_led_buffer+0x214>)
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	7859      	ldrb	r1, [r3, #1]
 80005b6:	0209      	lsls	r1, r1, #8
 80005b8:	430a      	orrs	r2, r1
 80005ba:	789b      	ldrb	r3, [r3, #2]
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	431a      	orrs	r2, r3
 80005c0:	2300      	movs	r3, #0
 80005c2:	f362 0317 	bfi	r3, r2, #0, #24
 80005c6:	461a      	mov	r2, r3
 80005c8:	211c      	movs	r1, #28
 80005ca:	480e      	ldr	r0, [pc, #56]	; (8000604 <set_led_buffer+0x210>)
 80005cc:	f000 fd46 	bl	800105c <ws2812b_set_diode_color>
		  ws2812b_set_diode_color(&ws2812b,29, led_color[0]);
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <set_led_buffer+0x214>)
 80005d2:	781a      	ldrb	r2, [r3, #0]
 80005d4:	7859      	ldrb	r1, [r3, #1]
 80005d6:	0209      	lsls	r1, r1, #8
 80005d8:	430a      	orrs	r2, r1
 80005da:	789b      	ldrb	r3, [r3, #2]
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	431a      	orrs	r2, r3
 80005e0:	2300      	movs	r3, #0
 80005e2:	f362 0317 	bfi	r3, r2, #0, #24
 80005e6:	461a      	mov	r2, r3
 80005e8:	211d      	movs	r1, #29
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <set_led_buffer+0x210>)
 80005ec:	f000 fd36 	bl	800105c <ws2812b_set_diode_color>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000014 	.word	0x20000014
 80005fc:	20000000 	.word	0x20000000
 8000600:	200000d8 	.word	0x200000d8
 8000604:	200000c8 	.word	0x200000c8
 8000608:	200000dc 	.word	0x200000dc
 800060c:	200000c3 	.word	0x200000c3

08000610 <color_switch_routine>:

void color_switch_routine(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
	uint8_t red_ok = 0, green_ok = 0, blue_ok = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	2300      	movs	r3, #0
 800061c:	71bb      	strb	r3, [r7, #6]
 800061e:	2300      	movs	r3, #0
 8000620:	717b      	strb	r3, [r7, #5]

	if (current_led_color.red < next_led_color.red) current_led_color.red ++;
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <color_switch_routine+0xdc>)
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <color_switch_routine+0xe0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d206      	bcs.n	800063c <color_switch_routine+0x2c>
 800062e:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <color_switch_routine+0xdc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <color_switch_routine+0xdc>)
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e00e      	b.n	800065a <color_switch_routine+0x4a>
	else if (current_led_color.red > next_led_color.red) current_led_color.red --;
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <color_switch_routine+0xdc>)
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <color_switch_routine+0xe0>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	d906      	bls.n	8000656 <color_switch_routine+0x46>
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <color_switch_routine+0xdc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <color_switch_routine+0xdc>)
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e001      	b.n	800065a <color_switch_routine+0x4a>
	else red_ok = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	71fb      	strb	r3, [r7, #7]

	if (current_led_color.green < next_led_color.green) current_led_color.green ++;
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <color_switch_routine+0xdc>)
 800065c:	785a      	ldrb	r2, [r3, #1]
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <color_switch_routine+0xe0>)
 8000660:	785b      	ldrb	r3, [r3, #1]
 8000662:	429a      	cmp	r2, r3
 8000664:	d206      	bcs.n	8000674 <color_switch_routine+0x64>
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <color_switch_routine+0xdc>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	3301      	adds	r3, #1
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <color_switch_routine+0xdc>)
 8000670:	705a      	strb	r2, [r3, #1]
 8000672:	e00e      	b.n	8000692 <color_switch_routine+0x82>
	else if (current_led_color.green > next_led_color.green) current_led_color.green --;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <color_switch_routine+0xdc>)
 8000676:	785a      	ldrb	r2, [r3, #1]
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <color_switch_routine+0xe0>)
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	429a      	cmp	r2, r3
 800067e:	d906      	bls.n	800068e <color_switch_routine+0x7e>
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <color_switch_routine+0xdc>)
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	3b01      	subs	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <color_switch_routine+0xdc>)
 800068a:	705a      	strb	r2, [r3, #1]
 800068c:	e001      	b.n	8000692 <color_switch_routine+0x82>
	else green_ok = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	71bb      	strb	r3, [r7, #6]

	if (current_led_color.blue < next_led_color.blue) current_led_color.blue ++;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <color_switch_routine+0xdc>)
 8000694:	789a      	ldrb	r2, [r3, #2]
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <color_switch_routine+0xe0>)
 8000698:	789b      	ldrb	r3, [r3, #2]
 800069a:	429a      	cmp	r2, r3
 800069c:	d206      	bcs.n	80006ac <color_switch_routine+0x9c>
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <color_switch_routine+0xdc>)
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	3301      	adds	r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <color_switch_routine+0xdc>)
 80006a8:	709a      	strb	r2, [r3, #2]
 80006aa:	e00e      	b.n	80006ca <color_switch_routine+0xba>
	else if (current_led_color.blue > next_led_color.blue) current_led_color.blue --;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <color_switch_routine+0xdc>)
 80006ae:	789a      	ldrb	r2, [r3, #2]
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <color_switch_routine+0xe0>)
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d906      	bls.n	80006c6 <color_switch_routine+0xb6>
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <color_switch_routine+0xdc>)
 80006ba:	789b      	ldrb	r3, [r3, #2]
 80006bc:	3b01      	subs	r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <color_switch_routine+0xdc>)
 80006c2:	709a      	strb	r2, [r3, #2]
 80006c4:	e001      	b.n	80006ca <color_switch_routine+0xba>
	else blue_ok = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	717b      	strb	r3, [r7, #5]

	if (red_ok && green_ok && blue_ok)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d008      	beq.n	80006e2 <color_switch_routine+0xd2>
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d005      	beq.n	80006e2 <color_switch_routine+0xd2>
 80006d6:	797b      	ldrb	r3, [r7, #5]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <color_switch_routine+0xd2>
		{
			color_switch_flag = 0;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <color_switch_routine+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]

		}
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	200000bc 	.word	0x200000bc
 80006f0:	200000c0 	.word	0x200000c0
 80006f4:	200000b8 	.word	0x200000b8

080006f8 <emka_clock_routine>:

void emka_clock_routine(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
#if (emka_display_mode == number)
	update_display_number(emka_display_number);
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <emka_clock_routine+0x3c>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fdd5 	bl	80002b0 <update_display_number>
#endif
#if (emka_display_mode == time)
	update_display_time(hours, minutes);
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <emka_clock_routine+0x40>)
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <emka_clock_routine+0x44>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	4610      	mov	r0, r2
 8000712:	f7ff fe2f 	bl	8000374 <update_display_time>
#endif


	 if (color_switch_flag)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <emka_clock_routine+0x48>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <emka_clock_routine+0x2a>
		 {
		 	 color_switch_routine();
 800071e:	f7ff ff77 	bl	8000610 <color_switch_routine>
		 }


	 set_lum();
 8000722:	f000 f811 	bl	8000748 <set_lum>
	 set_led_buffer();
 8000726:	f7ff fe65 	bl	80003f4 <set_led_buffer>
	 ws2812b_refresh(&ws2812b);
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <emka_clock_routine+0x4c>)
 800072c:	f000 fcaf 	bl	800108e <ws2812b_refresh>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000c4 	.word	0x200000c4
 8000738:	200000db 	.word	0x200000db
 800073c:	200000d6 	.word	0x200000d6
 8000740:	200000b8 	.word	0x200000b8
 8000744:	200000c8 	.word	0x200000c8

08000748 <set_lum>:
	next_led_color = new_color;
	color_switch_flag = 1;
}

void set_lum(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0


	uint8_t lum_scale_value, new_red, new_green, new_blue;
	lum_scale_value = ((emka_clock_lum_val*lum_range)/100)+min_lum;
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <set_lum+0x94>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	015b      	lsls	r3, r3, #5
 800075c:	1a9b      	subs	r3, r3, r2
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <set_lum+0x98>)
 8000760:	fb82 1203 	smull	r1, r2, r2, r3
 8000764:	1152      	asrs	r2, r2, #5
 8000766:	17db      	asrs	r3, r3, #31
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3305      	adds	r3, #5
 800076e:	71fb      	strb	r3, [r7, #7]



	new_red = (current_led_color.red * lum_scale_value) / 100;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <set_lum+0x9c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	fb03 f302 	mul.w	r3, r3, r2
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <set_lum+0x98>)
 800077e:	fb82 1203 	smull	r1, r2, r2, r3
 8000782:	1152      	asrs	r2, r2, #5
 8000784:	17db      	asrs	r3, r3, #31
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	71bb      	strb	r3, [r7, #6]
	new_green = (current_led_color.green * lum_scale_value) / 100;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <set_lum+0x9c>)
 800078c:	785b      	ldrb	r3, [r3, #1]
 800078e:	461a      	mov	r2, r3
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	fb03 f302 	mul.w	r3, r3, r2
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <set_lum+0x98>)
 8000798:	fb82 1203 	smull	r1, r2, r2, r3
 800079c:	1152      	asrs	r2, r2, #5
 800079e:	17db      	asrs	r3, r3, #31
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	717b      	strb	r3, [r7, #5]
	new_blue = (current_led_color.blue * lum_scale_value) / 100;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <set_lum+0x9c>)
 80007a6:	789b      	ldrb	r3, [r3, #2]
 80007a8:	461a      	mov	r2, r3
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	fb03 f302 	mul.w	r3, r3, r2
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <set_lum+0x98>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1152      	asrs	r2, r2, #5
 80007b8:	17db      	asrs	r3, r3, #31
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	713b      	strb	r3, [r7, #4]


	lumed_curr_led_color.red = new_red;
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <set_lum+0xa0>)
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	7013      	strb	r3, [r2, #0]
	lumed_curr_led_color.green = new_green;
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <set_lum+0xa0>)
 80007c6:	797b      	ldrb	r3, [r7, #5]
 80007c8:	7053      	strb	r3, [r2, #1]
	lumed_curr_led_color.blue = new_blue;
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <set_lum+0xa0>)
 80007cc:	793b      	ldrb	r3, [r7, #4]
 80007ce:	7093      	strb	r3, [r2, #2]

	//emka_display_number = lum_scale_value;
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200000d4 	.word	0x200000d4
 80007e0:	51eb851f 	.word	0x51eb851f
 80007e4:	200000bc 	.word	0x200000bc
 80007e8:	200000d8 	.word	0x200000d8

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fd49 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f941 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 fa5d 	bl	8000cb8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007fe:	f000 f99d 	bl	8000b3c <MX_ADC1_Init>
  MX_RTC_Init();
 8000802:	f000 f9d9 	bl	8000bb8 <MX_RTC_Init>
  MX_SPI1_Init();
 8000806:	f000 fa21 	bl	8000c4c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  emka_clock_system_init(&hspi1);
 800080a:	488c      	ldr	r0, [pc, #560]	; (8000a3c <main+0x250>)
 800080c:	f7ff fcc0 	bl	8000190 <emka_clock_system_init>

  emka_fotodetector = emka_fotodetector_init(&hadc1);
 8000810:	4c8b      	ldr	r4, [pc, #556]	; (8000a40 <main+0x254>)
 8000812:	463b      	mov	r3, r7
 8000814:	498b      	ldr	r1, [pc, #556]	; (8000a44 <main+0x258>)
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fc98 	bl	800014c <emka_fotodetector_init>
 800081c:	4622      	mov	r2, r4
 800081e:	463b      	mov	r3, r7
 8000820:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000824:	e882 0003 	stmia.w	r2, {r0, r1}
  //emka_display_number = 5432;

  current_led_color = led_color[1];
 8000828:	4a87      	ldr	r2, [pc, #540]	; (8000a48 <main+0x25c>)
 800082a:	4b88      	ldr	r3, [pc, #544]	; (8000a4c <main+0x260>)
 800082c:	3303      	adds	r3, #3
 800082e:	8819      	ldrh	r1, [r3, #0]
 8000830:	789b      	ldrb	r3, [r3, #2]
 8000832:	8011      	strh	r1, [r2, #0]
 8000834:	7093      	strb	r3, [r2, #2]
  uint8_t color_index = 1, PB_1_pressed = 0, PB_2_pressed = 0;
 8000836:	2301      	movs	r3, #1
 8000838:	737b      	strb	r3, [r7, #13]
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	2300      	movs	r3, #0
 8000840:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  	  	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 8000842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000846:	4882      	ldr	r0, [pc, #520]	; (8000a50 <main+0x264>)
 8000848:	f001 fc08 	bl	800205c <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d153      	bne.n	80008fa <main+0x10e>
	  	  	  {
	  	  		  if (PB_1_pressed == 0)
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d152      	bne.n	80008fe <main+0x112>
	  	  		  {
	  	  			if (hours < 23) hours ++;
 8000858:	4b7e      	ldr	r3, [pc, #504]	; (8000a54 <main+0x268>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b16      	cmp	r3, #22
 800085e:	d806      	bhi.n	800086e <main+0x82>
 8000860:	4b7c      	ldr	r3, [pc, #496]	; (8000a54 <main+0x268>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b7a      	ldr	r3, [pc, #488]	; (8000a54 <main+0x268>)
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e002      	b.n	8000874 <main+0x88>
	  	  			else hours = 0;
 800086e:	4b79      	ldr	r3, [pc, #484]	; (8000a54 <main+0x268>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]

	  	  			rtc_time.Hours = (hours / 10) << 4 | hours%10;
 8000874:	4b77      	ldr	r3, [pc, #476]	; (8000a54 <main+0x268>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4a77      	ldr	r2, [pc, #476]	; (8000a58 <main+0x26c>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	b2db      	uxtb	r3, r3
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	b258      	sxtb	r0, r3
 8000886:	4b73      	ldr	r3, [pc, #460]	; (8000a54 <main+0x268>)
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4b73      	ldr	r3, [pc, #460]	; (8000a58 <main+0x26c>)
 800088c:	fba3 1302 	umull	r1, r3, r3, r2
 8000890:	08d9      	lsrs	r1, r3, #3
 8000892:	460b      	mov	r3, r1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	4303      	orrs	r3, r0
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b6d      	ldr	r3, [pc, #436]	; (8000a5c <main+0x270>)
 80008a8:	701a      	strb	r2, [r3, #0]
	  	  			rtc_time.Minutes = (minutes / 10) << 4 | minutes%10;
 80008aa:	4b6d      	ldr	r3, [pc, #436]	; (8000a60 <main+0x274>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4a6a      	ldr	r2, [pc, #424]	; (8000a58 <main+0x26c>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	08db      	lsrs	r3, r3, #3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	b258      	sxtb	r0, r3
 80008bc:	4b68      	ldr	r3, [pc, #416]	; (8000a60 <main+0x274>)
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	4b65      	ldr	r3, [pc, #404]	; (8000a58 <main+0x26c>)
 80008c2:	fba3 1302 	umull	r1, r3, r3, r2
 80008c6:	08d9      	lsrs	r1, r3, #3
 80008c8:	460b      	mov	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	4303      	orrs	r3, r0
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b5f      	ldr	r3, [pc, #380]	; (8000a5c <main+0x270>)
 80008de:	705a      	strb	r2, [r3, #1]


	  	  			if (HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BCD) != HAL_OK)
 80008e0:	2201      	movs	r2, #1
 80008e2:	495e      	ldr	r1, [pc, #376]	; (8000a5c <main+0x270>)
 80008e4:	485f      	ldr	r0, [pc, #380]	; (8000a64 <main+0x278>)
 80008e6:	f002 fa1d 	bl	8002d24 <HAL_RTC_SetTime>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <main+0x108>
	  	  			{
	  	  				Error_Handler();
 80008f0:	f000 fa48 	bl	8000d84 <Error_Handler>
	  	  			}
	  	  			PB_1_pressed = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e001      	b.n	80008fe <main+0x112>
	  	  		  }

	  	  		  //switch_color(led_color[3]);
	  	  	  }
	  	  	  else PB_1_pressed = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]


	  	  	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET)
 80008fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000902:	4853      	ldr	r0, [pc, #332]	; (8000a50 <main+0x264>)
 8000904:	f001 fbaa 	bl	800205c <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d153      	bne.n	80009b6 <main+0x1ca>
	  	  	  {
	  	  		  if (PB_2_pressed == 0)
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d152      	bne.n	80009ba <main+0x1ce>
	  	  		  {
	  	  			if (minutes < 59) minutes ++;
 8000914:	4b52      	ldr	r3, [pc, #328]	; (8000a60 <main+0x274>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b3a      	cmp	r3, #58	; 0x3a
 800091a:	d806      	bhi.n	800092a <main+0x13e>
 800091c:	4b50      	ldr	r3, [pc, #320]	; (8000a60 <main+0x274>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <main+0x274>)
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	e002      	b.n	8000930 <main+0x144>
	  	  			else minutes = 0;
 800092a:	4b4d      	ldr	r3, [pc, #308]	; (8000a60 <main+0x274>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

	  	  			rtc_time.Hours = (hours / 10) << 4 | hours%10;
 8000930:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <main+0x268>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4a48      	ldr	r2, [pc, #288]	; (8000a58 <main+0x26c>)
 8000936:	fba2 2303 	umull	r2, r3, r2, r3
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	b258      	sxtb	r0, r3
 8000942:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <main+0x268>)
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <main+0x26c>)
 8000948:	fba3 1302 	umull	r1, r3, r3, r2
 800094c:	08d9      	lsrs	r1, r3, #3
 800094e:	460b      	mov	r3, r1
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	b2db      	uxtb	r3, r3
 800095a:	b25b      	sxtb	r3, r3
 800095c:	4303      	orrs	r3, r0
 800095e:	b25b      	sxtb	r3, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <main+0x270>)
 8000964:	701a      	strb	r2, [r3, #0]
	  	  			rtc_time.Minutes = (minutes / 10) << 4 | minutes%10;
 8000966:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <main+0x274>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4a3b      	ldr	r2, [pc, #236]	; (8000a58 <main+0x26c>)
 800096c:	fba2 2303 	umull	r2, r3, r2, r3
 8000970:	08db      	lsrs	r3, r3, #3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	b258      	sxtb	r0, r3
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <main+0x274>)
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <main+0x26c>)
 800097e:	fba3 1302 	umull	r1, r3, r3, r2
 8000982:	08d9      	lsrs	r1, r3, #3
 8000984:	460b      	mov	r3, r1
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	b25b      	sxtb	r3, r3
 8000992:	4303      	orrs	r3, r0
 8000994:	b25b      	sxtb	r3, r3
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <main+0x270>)
 800099a:	705a      	strb	r2, [r3, #1]

	  	  			if (HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BCD) != HAL_OK)
 800099c:	2201      	movs	r2, #1
 800099e:	492f      	ldr	r1, [pc, #188]	; (8000a5c <main+0x270>)
 80009a0:	4830      	ldr	r0, [pc, #192]	; (8000a64 <main+0x278>)
 80009a2:	f002 f9bf 	bl	8002d24 <HAL_RTC_SetTime>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <main+0x1c4>
	  	  			{
	  	  				Error_Handler();
 80009ac:	f000 f9ea 	bl	8000d84 <Error_Handler>
	  	  			}
	  	  			PB_2_pressed = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	73bb      	strb	r3, [r7, #14]
 80009b4:	e001      	b.n	80009ba <main+0x1ce>
	  	  		  }

	  	  		  //switch_color(led_color[2]);
	  	  	  }
	  	  	  else PB_2_pressed = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73bb      	strb	r3, [r7, #14]
	  		  //emka_display_number = emka_clock_lum_val;
	  		//emka_clock_routine();
	  		  //HAL_Delay(50);

	  	  	  fd_sensor_start(emka_fotodetector);
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <main+0x254>)
 80009bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009c0:	f7ff fbd8 	bl	8000174 <fd_sensor_start>

	  		  emka_clock_lum_val =  ((100*emka_fotodetector.fotodetector_adc_value) / 4096);
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <main+0x254>)
 80009c6:	889b      	ldrh	r3, [r3, #4]
 80009c8:	461a      	mov	r2, r3
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	fb03 f302 	mul.w	r3, r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	da01      	bge.n	80009d8 <main+0x1ec>
 80009d4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80009d8:	131b      	asrs	r3, r3, #12
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <main+0x27c>)
 80009de:	701a      	strb	r2, [r3, #0]
	  		  emka_display_number = emka_clock_lum_val;
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <main+0x27c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <main+0x280>)
 80009e8:	801a      	strh	r2, [r3, #0]
	  		  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80009ea:	2200      	movs	r2, #0
 80009ec:	491b      	ldr	r1, [pc, #108]	; (8000a5c <main+0x270>)
 80009ee:	481d      	ldr	r0, [pc, #116]	; (8000a64 <main+0x278>)
 80009f0:	f002 fa30 	bl	8002e54 <HAL_RTC_GetTime>
		  	  if (seconds != rtc_time.Seconds) dots ^= 1;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <main+0x270>)
 80009f6:	789a      	ldrb	r2, [r3, #2]
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <main+0x284>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d006      	beq.n	8000a0e <main+0x222>
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <main+0x288>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	f083 0301 	eor.w	r3, r3, #1
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <main+0x288>)
 8000a0c:	701a      	strb	r2, [r3, #0]
		  		  else color_index = 1;
		  		  switch_color(led_color[color_index]);
		  		  color_switch_flag = 1;
		  	  }
		  	  */
		  	  hours = rtc_time.Hours;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <main+0x270>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <main+0x268>)
 8000a14:	701a      	strb	r2, [r3, #0]
		  	  minutes = rtc_time.Minutes;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <main+0x270>)
 8000a18:	785a      	ldrb	r2, [r3, #1]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <main+0x274>)
 8000a1c:	701a      	strb	r2, [r3, #0]
		  	  seconds = rtc_time.Seconds;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <main+0x270>)
 8000a20:	789a      	ldrb	r2, [r3, #2]
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <main+0x284>)
 8000a24:	701a      	strb	r2, [r3, #0]
		  	  emka_clock_routine();
 8000a26:	f7ff fe67 	bl	80006f8 <emka_clock_routine>

		  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2e:	4812      	ldr	r0, [pc, #72]	; (8000a78 <main+0x28c>)
 8000a30:	f001 fb43 	bl	80020ba <HAL_GPIO_TogglePin>

		  	  HAL_Delay(50);
 8000a34:	2032      	movs	r0, #50	; 0x32
 8000a36:	f000 fc89 	bl	800134c <HAL_Delay>
	  	  	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 8000a3a:	e702      	b.n	8000842 <main+0x56>
 8000a3c:	20000144 	.word	0x20000144
 8000a40:	200000b0 	.word	0x200000b0
 8000a44:	200000fc 	.word	0x200000fc
 8000a48:	200000bc 	.word	0x200000bc
 8000a4c:	200000dc 	.word	0x200000dc
 8000a50:	40010c00 	.word	0x40010c00
 8000a54:	200000db 	.word	0x200000db
 8000a58:	cccccccd 	.word	0xcccccccd
 8000a5c:	2000012c 	.word	0x2000012c
 8000a60:	200000d6 	.word	0x200000d6
 8000a64:	20000130 	.word	0x20000130
 8000a68:	200000d4 	.word	0x200000d4
 8000a6c:	200000c4 	.word	0x200000c4
 8000a70:	200000d5 	.word	0x200000d5
 8000a74:	200000c3 	.word	0x200000c3
 8000a78:	40011000 	.word	0x40011000

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a86:	2228      	movs	r2, #40	; 0x28
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 f8aa 	bl	8003be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000aac:	2305      	movs	r3, #5
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000aba:	2301      	movs	r3, #1
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000acc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fb14 	bl	8002104 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ae2:	f000 f94f 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2101      	movs	r1, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 fd7e 	bl	8002604 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b0e:	f000 f939 	bl	8000d84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000b12:	2303      	movs	r3, #3
 8000b14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b20:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fef5 	bl	8002914 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b30:	f000 f928 	bl	8000d84 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	3750      	adds	r7, #80	; 0x50
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b4e:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <MX_ADC1_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b66:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b7a:	f000 fc09 	bl	8001390 <HAL_ADC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f8fe 	bl	8000d84 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b88:	2309      	movs	r3, #9
 8000b8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_ADC1_Init+0x74>)
 8000b9a:	f000 fe69 	bl	8001870 <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ba4:	f000 f8ee 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000fc 	.word	0x200000fc
 8000bb4:	40012400 	.word	0x40012400

08000bb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	460a      	mov	r2, r1
 8000bc4:	801a      	strh	r2, [r3, #0]
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_RTC_Init+0x8c>)
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <MX_RTC_Init+0x90>)
 8000bd2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_RTC_Init+0x8c>)
 8000bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bda:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_RTC_Init+0x8c>)
 8000bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be4:	4817      	ldr	r0, [pc, #92]	; (8000c44 <MX_RTC_Init+0x8c>)
 8000be6:	f002 f807 	bl	8002bf8 <HAL_RTC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000bf0:	f000 f8c8 	bl	8000d84 <Error_Handler>
  /* USER CODE BEGIN Check_RTC_BKUP */
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	480f      	ldr	r0, [pc, #60]	; (8000c44 <MX_RTC_Init+0x8c>)
 8000c08:	f002 f88c 	bl	8002d24 <HAL_RTC_SetTime>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000c12:	f000 f8b7 	bl	8000d84 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c16:	2301      	movs	r3, #1
 8000c18:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_RTC_Init+0x8c>)
 8000c2e:	f002 f9e9 	bl	8003004 <HAL_RTC_SetDate>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000c38:	f000 f8a4 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000130 	.word	0x20000130
 8000c48:	40002800 	.word	0x40002800

08000c4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <MX_SPI1_Init+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c80:	2210      	movs	r2, #16
 8000c82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c98:	220a      	movs	r2, #10
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_SPI1_Init+0x64>)
 8000c9e:	f002 fd09 	bl	80036b4 <HAL_SPI_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ca8:	f000 f86c 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000144 	.word	0x20000144
 8000cb4:	40013000 	.word	0x40013000

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a29      	ldr	r2, [pc, #164]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000cea:	f043 0320 	orr.w	r3, r3, #32
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_GPIO_Init+0xc0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d32:	4812      	ldr	r0, [pc, #72]	; (8000d7c <MX_GPIO_Init+0xc4>)
 8000d34:	f001 f9a9 	bl	800208a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480a      	ldr	r0, [pc, #40]	; (8000d7c <MX_GPIO_Init+0xc4>)
 8000d52:	f001 f829 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0xc8>)
 8000d6c:	f001 f81c 	bl	8001da8 <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40010c00 	.word	0x40010c00

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_MspInit+0x5c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <HAL_MspInit+0x5c>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x5c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_MspInit+0x5c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_MspInit+0x60>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_MspInit+0x60>)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000

08000df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <HAL_ADC_MspInit+0x7c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d129      	bne.n	8000e68 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e44:	2302      	movs	r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_ADC_MspInit+0x84>)
 8000e54:	f000 ffa8 	bl	8001da8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2012      	movs	r0, #18
 8000e5e:	f000 ff6c 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e62:	2012      	movs	r0, #18
 8000e64:	f000 ff85 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40012400 	.word	0x40012400
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010c00 	.word	0x40010c00

08000e7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_RTC_MspInit+0x3c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d110      	bne.n	8000eb0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e8e:	f001 f92d 	bl	80020ec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_RTC_MspInit+0x40>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <HAL_RTC_MspInit+0x40>)
 8000e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_RTC_MspInit+0x40>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_RTC_MspInit+0x44>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40002800 	.word	0x40002800
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	4242043c 	.word	0x4242043c

08000ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <HAL_SPI_MspInit+0x70>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d123      	bne.n	8000f2c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_SPI_MspInit+0x74>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_SPI_MspInit+0x74>)
 8000eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_SPI_MspInit+0x74>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_SPI_MspInit+0x74>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_SPI_MspInit+0x74>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_SPI_MspInit+0x74>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f14:	23a0      	movs	r3, #160	; 0xa0
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_SPI_MspInit+0x78>)
 8000f28:	f000 ff3e 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40013000 	.word	0x40013000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <HardFault_Handler+0x4>

08000f52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <MemManage_Handler+0x4>

08000f58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <BusFault_Handler+0x4>

08000f5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <UsageFault_Handler+0x4>

08000f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f9c2 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	emka_fotodetector.fotodetector_adc_value = HAL_ADC_GetValue(emka_fotodetector.adc_handler);
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <ADC1_2_IRQHandler+0x20>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fb85 	bl	80016ac <HAL_ADC_GetValue>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <ADC1_2_IRQHandler+0x20>)
 8000fa8:	809a      	strh	r2, [r3, #4]
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <ADC1_2_IRQHandler+0x24>)
 8000fac:	f000 fb8a 	bl	80016c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000b0 	.word	0x200000b0
 8000fb8:	200000fc 	.word	0x200000fc

08000fbc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x50>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x16>
		heap_end = &end;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <_sbrk+0x50>)
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <_sbrk+0x54>)
 8000fd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <_sbrk+0x50>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <_sbrk+0x50>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	466a      	mov	r2, sp
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d907      	bls.n	8000ff6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fe6:	f002 fdd3 	bl	8003b90 <__errno>
 8000fea:	4602      	mov	r2, r0
 8000fec:	230c      	movs	r3, #12
 8000fee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	e006      	b.n	8001004 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <_sbrk+0x50>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a03      	ldr	r2, [pc, #12]	; (800100c <_sbrk+0x50>)
 8001000:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000a4 	.word	0x200000a4
 8001010:	200001a8 	.word	0x200001a8

08001014 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <ws2812b_init>:
 *      Author: mkowalski
 */


#include "ws2812b.h"
ws2812b_config ws2812b_init(SPI_HandleTypeDef * spi_handler, uint16_t diodes_count) {
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	4613      	mov	r3, r2
 800102c:	80fb      	strh	r3, [r7, #6]
	ws2812b_config config;
	config.spi_handler = spi_handler;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	617b      	str	r3, [r7, #20]
	config.diodes_count = diodes_count;
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	833b      	strh	r3, [r7, #24]
	config.colors_array = calloc(diodes_count, sizeof(ws2812b_color));
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	2103      	movs	r1, #3
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fda0 	bl	8003b80 <calloc>
 8001040:	4603      	mov	r3, r0
 8001042:	61fb      	str	r3, [r7, #28]
	return config;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	461c      	mov	r4, r3
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	3724      	adds	r7, #36	; 0x24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}

0800105c <ws2812b_set_diode_color>:

void ws2812b_set_diode_color(ws2812b_config * config, uint16_t diode_id, ws2812b_color color)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	460b      	mov	r3, r1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	817b      	strh	r3, [r7, #10]
	config->colors_array[diode_id] = color;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6899      	ldr	r1, [r3, #8]
 800106e:	897a      	ldrh	r2, [r7, #10]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	440b      	add	r3, r1
 8001078:	461a      	mov	r2, r3
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	8819      	ldrh	r1, [r3, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	8011      	strh	r1, [r2, #0]
 8001082:	7093      	strb	r3, [r2, #2]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <ws2812b_refresh>:

void ws2812b_refresh(ws2812b_config * config){
 800108e:	b5b0      	push	{r4, r5, r7, lr}
 8001090:	b088      	sub	sp, #32
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	466b      	mov	r3, sp
 8001098:	461d      	mov	r5, r3
/* ORYGINALNE USTAWIENIA
	const uint8_t zero = 0b00011111;
	const uint8_t one = 0b00000111;
*/
	const uint8_t zero = 0b00001111;
 800109a:	230f      	movs	r3, #15
 800109c:	757b      	strb	r3, [r7, #21]
	const uint8_t one = 0b00000011;
 800109e:	2303      	movs	r3, #3
 80010a0:	753b      	strb	r3, [r7, #20]
	uint8_t buffer[(config->diodes_count) * 24];
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	889b      	ldrh	r3, [r3, #4]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4618      	mov	r0, r3
 80010b2:	1e43      	subs	r3, r0, #1
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4603      	mov	r3, r0
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	f04f 0400 	mov.w	r4, #0
 80010c6:	00d4      	lsls	r4, r2, #3
 80010c8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010cc:	00cb      	lsls	r3, r1, #3
 80010ce:	4603      	mov	r3, r0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	f04f 0400 	mov.w	r4, #0
 80010de:	00d4      	lsls	r4, r2, #3
 80010e0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010e4:	00cb      	lsls	r3, r1, #3
 80010e6:	4603      	mov	r3, r0
 80010e8:	3307      	adds	r3, #7
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	ebad 0d03 	sub.w	sp, sp, r3
 80010f2:	466b      	mov	r3, sp
 80010f4:	3300      	adds	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0, j = 0; i < config->diodes_count; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	83bb      	strh	r3, [r7, #28]
 80010fc:	2300      	movs	r3, #0
 80010fe:	83fb      	strh	r3, [r7, #30]
 8001100:	e080      	b.n	8001204 <ws2812b_refresh+0x176>

		//Zielony
		for (int16_t k = 7; k >= 0; k--) {
 8001102:	2307      	movs	r3, #7
 8001104:	837b      	strh	r3, [r7, #26]
 8001106:	e022      	b.n	800114e <ws2812b_refresh+0xc0>
			if ((config->colors_array[i].green & (1 << k)) == 0) buffer[j] = one;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6899      	ldr	r1, [r3, #8]
 800110c:	8bba      	ldrh	r2, [r7, #28]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	440b      	add	r3, r1
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	461a      	mov	r2, r3
 800111a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800111e:	fa42 f303 	asr.w	r3, r2, r3
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d104      	bne.n	8001134 <ws2812b_refresh+0xa6>
 800112a:	8bfb      	ldrh	r3, [r7, #30]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	7d39      	ldrb	r1, [r7, #20]
 8001130:	54d1      	strb	r1, [r2, r3]
 8001132:	e003      	b.n	800113c <ws2812b_refresh+0xae>
			else buffer[j] = zero;
 8001134:	8bfb      	ldrh	r3, [r7, #30]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	7d79      	ldrb	r1, [r7, #21]
 800113a:	54d1      	strb	r1, [r2, r3]
			j++;
 800113c:	8bfb      	ldrh	r3, [r7, #30]
 800113e:	3301      	adds	r3, #1
 8001140:	83fb      	strh	r3, [r7, #30]
		for (int16_t k = 7; k >= 0; k--) {
 8001142:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001146:	b29b      	uxth	r3, r3
 8001148:	3b01      	subs	r3, #1
 800114a:	b29b      	uxth	r3, r3
 800114c:	837b      	strh	r3, [r7, #26]
 800114e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001152:	2b00      	cmp	r3, #0
 8001154:	dad8      	bge.n	8001108 <ws2812b_refresh+0x7a>
		}
		//Czerwony
		for (int16_t k = 7; k >= 0; k--) {
 8001156:	2307      	movs	r3, #7
 8001158:	833b      	strh	r3, [r7, #24]
 800115a:	e022      	b.n	80011a2 <ws2812b_refresh+0x114>
			if ((config->colors_array[i].red & (1 << k)) == 0) buffer[j] = one;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6899      	ldr	r1, [r3, #8]
 8001160:	8bba      	ldrh	r2, [r7, #28]
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001172:	fa42 f303 	asr.w	r3, r2, r3
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d104      	bne.n	8001188 <ws2812b_refresh+0xfa>
 800117e:	8bfb      	ldrh	r3, [r7, #30]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	7d39      	ldrb	r1, [r7, #20]
 8001184:	54d1      	strb	r1, [r2, r3]
 8001186:	e003      	b.n	8001190 <ws2812b_refresh+0x102>
			else buffer[j] = zero;
 8001188:	8bfb      	ldrh	r3, [r7, #30]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	7d79      	ldrb	r1, [r7, #21]
 800118e:	54d1      	strb	r1, [r2, r3]
			j++;
 8001190:	8bfb      	ldrh	r3, [r7, #30]
 8001192:	3301      	adds	r3, #1
 8001194:	83fb      	strh	r3, [r7, #30]
		for (int16_t k = 7; k >= 0; k--) {
 8001196:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800119a:	b29b      	uxth	r3, r3
 800119c:	3b01      	subs	r3, #1
 800119e:	b29b      	uxth	r3, r3
 80011a0:	833b      	strh	r3, [r7, #24]
 80011a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	dad8      	bge.n	800115c <ws2812b_refresh+0xce>
		}
		//Niebieski
		for (int16_t k = 7; k >= 0; k--) {
 80011aa:	2307      	movs	r3, #7
 80011ac:	82fb      	strh	r3, [r7, #22]
 80011ae:	e022      	b.n	80011f6 <ws2812b_refresh+0x168>
			if ((config->colors_array[i].blue & (1 << k)) == 0) buffer[j] = one;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6899      	ldr	r1, [r3, #8]
 80011b4:	8bba      	ldrh	r2, [r7, #28]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	440b      	add	r3, r1
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	461a      	mov	r2, r3
 80011c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011c6:	fa42 f303 	asr.w	r3, r2, r3
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d104      	bne.n	80011dc <ws2812b_refresh+0x14e>
 80011d2:	8bfb      	ldrh	r3, [r7, #30]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	7d39      	ldrb	r1, [r7, #20]
 80011d8:	54d1      	strb	r1, [r2, r3]
 80011da:	e003      	b.n	80011e4 <ws2812b_refresh+0x156>
			else buffer[j] = zero;
 80011dc:	8bfb      	ldrh	r3, [r7, #30]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	7d79      	ldrb	r1, [r7, #21]
 80011e2:	54d1      	strb	r1, [r2, r3]
			j++;
 80011e4:	8bfb      	ldrh	r3, [r7, #30]
 80011e6:	3301      	adds	r3, #1
 80011e8:	83fb      	strh	r3, [r7, #30]
		for (int16_t k = 7; k >= 0; k--) {
 80011ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	3b01      	subs	r3, #1
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	82fb      	strh	r3, [r7, #22]
 80011f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dad8      	bge.n	80011b0 <ws2812b_refresh+0x122>
	for (uint16_t i = 0, j = 0; i < config->diodes_count; i++) {
 80011fe:	8bbb      	ldrh	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	83bb      	strh	r3, [r7, #28]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	889b      	ldrh	r3, [r3, #4]
 8001208:	8bba      	ldrh	r2, [r7, #28]
 800120a:	429a      	cmp	r2, r3
 800120c:	f4ff af79 	bcc.w	8001102 <ws2812b_refresh+0x74>
		}
	}

	HAL_SPI_Transmit(config->spi_handler, &buffer, config->diodes_count * 24, 1000);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	889b      	ldrh	r3, [r3, #4]
 800121a:	461a      	mov	r2, r3
 800121c:	0052      	lsls	r2, r2, #1
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	b29a      	uxth	r2, r3
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	f002 fac8 	bl	80037bc <HAL_SPI_Transmit>
	HAL_Delay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 f88d 	bl	800134c <HAL_Delay>
 8001232:	46ad      	mov	sp, r5
}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bdb0      	pop	{r4, r5, r7, pc}

0800123c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800123c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800123e:	e003      	b.n	8001248 <LoopCopyDataInit>

08001240 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001242:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001244:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001246:	3104      	adds	r1, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800124c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800124e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001250:	d3f6      	bcc.n	8001240 <CopyDataInit>
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001254:	e002      	b.n	800125c <LoopFillZerobss>

08001256 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001258:	f842 3b04 	str.w	r3, [r2], #4

0800125c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800125e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001260:	d3f9      	bcc.n	8001256 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001262:	f7ff fed7 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001266:	f002 fc99 	bl	8003b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126a:	f7ff fabf 	bl	80007ec <main>
  bx lr
 800126e:	4770      	bx	lr
  ldr r3, =_sidata
 8001270:	08003d48 	.word	0x08003d48
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001278:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 800127c:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8001280:	200001a4 	.word	0x200001a4

08001284 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <CAN1_RX1_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x28>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x28>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 fd43 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fd74 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fd5b 	bl	8001d8e <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 fd23 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000018 	.word	0x20000018
 800130c:	20000020 	.word	0x20000020
 8001310:	2000001c 	.word	0x2000001c

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_IncTick+0x20>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000020 	.word	0x20000020
 8001334:	2000019c 	.word	0x2000019c

08001338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	2000019c 	.word	0x2000019c

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fff0 	bl	8001338 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_Delay+0x40>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffe0 	bl	8001338 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000020 	.word	0x20000020

08001390 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0be      	b.n	8001530 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fd10 	bl	8000df4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fb95 	bl	8001b04 <ADC_ConversionStop_Disable>
 80013da:	4603      	mov	r3, r0
 80013dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 8099 	bne.w	800151e <HAL_ADC_Init+0x18e>
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 8095 	bne.w	800151e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013fc:	f023 0302 	bic.w	r3, r3, #2
 8001400:	f043 0202 	orr.w	r2, r3, #2
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001410:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7b1b      	ldrb	r3, [r3, #12]
 8001416:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001418:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	4313      	orrs	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001428:	d003      	beq.n	8001432 <HAL_ADC_Init+0xa2>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d102      	bne.n	8001438 <HAL_ADC_Init+0xa8>
 8001432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001436:	e000      	b.n	800143a <HAL_ADC_Init+0xaa>
 8001438:	2300      	movs	r3, #0
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7d1b      	ldrb	r3, [r3, #20]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d119      	bne.n	800147c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7b1b      	ldrb	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d109      	bne.n	8001464 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	3b01      	subs	r3, #1
 8001456:	035a      	lsls	r2, r3, #13
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	e00b      	b.n	800147c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	f043 0220 	orr.w	r2, r3, #32
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	430a      	orrs	r2, r1
 800148e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_ADC_Init+0x1a8>)
 8001498:	4013      	ands	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ac:	d003      	beq.n	80014b6 <HAL_ADC_Init+0x126>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d104      	bne.n	80014c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	051b      	lsls	r3, r3, #20
 80014be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_ADC_Init+0x1ac>)
 80014dc:	4013      	ands	r3, r2
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d10b      	bne.n	80014fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	f023 0303 	bic.w	r3, r3, #3
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014fa:	e018      	b.n	800152e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f023 0312 	bic.w	r3, r3, #18
 8001504:	f043 0210 	orr.w	r2, r3, #16
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800151c:	e007      	b.n	800152e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	f043 0210 	orr.w	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800152e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	ffe1f7fd 	.word	0xffe1f7fd
 800153c:	ff1f0efe 	.word	0xff1f0efe

08001540 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_ADC_Start_IT+0x1a>
 8001556:	2302      	movs	r3, #2
 8001558:	e0a0      	b.n	800169c <HAL_ADC_Start_IT+0x15c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fa7c 	bl	8001a60 <ADC_Enable>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 808f 	bne.w	8001692 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a45      	ldr	r2, [pc, #276]	; (80016a4 <HAL_ADC_Start_IT+0x164>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d105      	bne.n	800159e <HAL_ADC_Start_IT+0x5e>
 8001592:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <HAL_ADC_Start_IT+0x168>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d115      	bne.n	80015ca <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d026      	beq.n	8001606 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015c8:	e01d      	b.n	8001606 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a33      	ldr	r2, [pc, #204]	; (80016a8 <HAL_ADC_Start_IT+0x168>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d004      	beq.n	80015ea <HAL_ADC_Start_IT+0xaa>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <HAL_ADC_Start_IT+0x164>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10d      	bne.n	8001606 <HAL_ADC_Start_IT+0xc6>
 80015ea:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <HAL_ADC_Start_IT+0x168>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	f023 0206 	bic.w	r2, r3, #6
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
 800161e:	e002      	b.n	8001626 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f06f 0202 	mvn.w	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001652:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001656:	d113      	bne.n	8001680 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_ADC_Start_IT+0x164>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d105      	bne.n	800166e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_ADC_Start_IT+0x168>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	e00c      	b.n	800169a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	e003      	b.n	800169a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40012800 	.word	0x40012800
 80016a8:	40012400 	.word	0x40012400

080016ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d140      	bne.n	800175c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d139      	bne.n	800175c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800170a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800170e:	d11d      	bne.n	800174c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001714:	2b00      	cmp	r3, #0
 8001716:	d119      	bne.n	800174c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0220 	bic.w	r2, r2, #32
 8001726:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f87c 	bl	800184a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f06f 0212 	mvn.w	r2, #18
 800175a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	2b80      	cmp	r3, #128	; 0x80
 8001768:	d14f      	bne.n	800180a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b04      	cmp	r3, #4
 8001776:	d148      	bne.n	800180a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800179a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800179e:	d012      	beq.n	80017c6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d125      	bne.n	80017fa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017bc:	d11d      	bne.n	80017fa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d119      	bne.n	80017fa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f9bc 	bl	8001b78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f06f 020c 	mvn.w	r2, #12
 8001808:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001814:	2b40      	cmp	r3, #64	; 0x40
 8001816:	d114      	bne.n	8001842 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10d      	bne.n	8001842 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f812 	bl	800185c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0201 	mvn.w	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
	...

08001870 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x20>
 800188c:	2302      	movs	r3, #2
 800188e:	e0dc      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x1da>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b06      	cmp	r3, #6
 800189e:	d81c      	bhi.n	80018da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b05      	subs	r3, #5
 80018b2:	221f      	movs	r2, #31
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4019      	ands	r1, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b05      	subs	r3, #5
 80018cc:	fa00 f203 	lsl.w	r2, r0, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
 80018d8:	e03c      	b.n	8001954 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d81c      	bhi.n	800191c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b23      	subs	r3, #35	; 0x23
 80018f4:	221f      	movs	r2, #31
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4019      	ands	r1, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b23      	subs	r3, #35	; 0x23
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
 800191a:	e01b      	b.n	8001954 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3b41      	subs	r3, #65	; 0x41
 800192e:	221f      	movs	r2, #31
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	4019      	ands	r1, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b41      	subs	r3, #65	; 0x41
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d91c      	bls.n	8001996 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68d9      	ldr	r1, [r3, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	3b1e      	subs	r3, #30
 800196e:	2207      	movs	r2, #7
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	4019      	ands	r1, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6898      	ldr	r0, [r3, #8]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	3b1e      	subs	r3, #30
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	e019      	b.n	80019ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6919      	ldr	r1, [r3, #16]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	2207      	movs	r2, #7
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4019      	ands	r1, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6898      	ldr	r0, [r3, #8]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	fa00 f203 	lsl.w	r2, r0, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d003      	beq.n	80019da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019d6:	2b11      	cmp	r3, #17
 80019d8:	d132      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_ADC_ConfigChannel+0x1e4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d125      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d126      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a00:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d11a      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	0c9a      	lsrs	r2, r3, #18
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x1b2>
 8001a2e:	e007      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	f043 0220 	orr.w	r2, r3, #32
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40012400 	.word	0x40012400
 8001a58:	20000018 	.word	0x20000018
 8001a5c:	431bde83 	.word	0x431bde83

08001a60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d039      	beq.n	8001af2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <ADC_Enable+0x9c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <ADC_Enable+0xa0>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9b      	lsrs	r3, r3, #18
 8001a9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a9c:	e002      	b.n	8001aa4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aaa:	f7ff fc45 	bl	8001338 <HAL_GetTick>
 8001aae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ab0:	e018      	b.n	8001ae4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ab2:	f7ff fc41 	bl	8001338 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d911      	bls.n	8001ae4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f043 0210 	orr.w	r2, r3, #16
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e007      	b.n	8001af4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d1df      	bne.n	8001ab2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000018 	.word	0x20000018
 8001b00:	431bde83 	.word	0x431bde83

08001b04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d127      	bne.n	8001b6e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b2e:	f7ff fc03 	bl	8001338 <HAL_GetTick>
 8001b32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b34:	e014      	b.n	8001b60 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b36:	f7ff fbff 	bl	8001338 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d90d      	bls.n	8001b60 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	f043 0201 	orr.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e007      	b.n	8001b70 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d0e3      	beq.n	8001b36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4906      	ldr	r1, [pc, #24]	; (8001c24 <__NVIC_EnableIRQ+0x34>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff90 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff2d 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff42 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff90 	bl	8001c7c <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5f 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff35 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b08b      	sub	sp, #44	; 0x2c
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	e127      	b.n	800200c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 8116 	bne.w	8002006 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d034      	beq.n	8001e4c <HAL_GPIO_Init+0xa4>
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d80d      	bhi.n	8001e02 <HAL_GPIO_Init+0x5a>
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d02b      	beq.n	8001e42 <HAL_GPIO_Init+0x9a>
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d804      	bhi.n	8001df8 <HAL_GPIO_Init+0x50>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d031      	beq.n	8001e56 <HAL_GPIO_Init+0xae>
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d01c      	beq.n	8001e30 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001df6:	e048      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d043      	beq.n	8001e84 <HAL_GPIO_Init+0xdc>
 8001dfc:	2b11      	cmp	r3, #17
 8001dfe:	d01b      	beq.n	8001e38 <HAL_GPIO_Init+0x90>
          break;
 8001e00:	e043      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e02:	4a89      	ldr	r2, [pc, #548]	; (8002028 <HAL_GPIO_Init+0x280>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d026      	beq.n	8001e56 <HAL_GPIO_Init+0xae>
 8001e08:	4a87      	ldr	r2, [pc, #540]	; (8002028 <HAL_GPIO_Init+0x280>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d806      	bhi.n	8001e1c <HAL_GPIO_Init+0x74>
 8001e0e:	4a87      	ldr	r2, [pc, #540]	; (800202c <HAL_GPIO_Init+0x284>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d020      	beq.n	8001e56 <HAL_GPIO_Init+0xae>
 8001e14:	4a86      	ldr	r2, [pc, #536]	; (8002030 <HAL_GPIO_Init+0x288>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01d      	beq.n	8001e56 <HAL_GPIO_Init+0xae>
          break;
 8001e1a:	e036      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e1c:	4a85      	ldr	r2, [pc, #532]	; (8002034 <HAL_GPIO_Init+0x28c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d019      	beq.n	8001e56 <HAL_GPIO_Init+0xae>
 8001e22:	4a85      	ldr	r2, [pc, #532]	; (8002038 <HAL_GPIO_Init+0x290>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d016      	beq.n	8001e56 <HAL_GPIO_Init+0xae>
 8001e28:	4a84      	ldr	r2, [pc, #528]	; (800203c <HAL_GPIO_Init+0x294>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0xae>
          break;
 8001e2e:	e02c      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e028      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e023      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	3308      	adds	r3, #8
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e01e      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	330c      	adds	r3, #12
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e019      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e012      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	611a      	str	r2, [r3, #16]
          break;
 8001e76:	e008      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	615a      	str	r2, [r3, #20]
          break;
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2bff      	cmp	r3, #255	; 0xff
 8001e8e:	d801      	bhi.n	8001e94 <HAL_GPIO_Init+0xec>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	e001      	b.n	8001e98 <HAL_GPIO_Init+0xf0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2bff      	cmp	r3, #255	; 0xff
 8001e9e:	d802      	bhi.n	8001ea6 <HAL_GPIO_Init+0xfe>
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x104>
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	3b08      	subs	r3, #8
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	6a39      	ldr	r1, [r7, #32]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 8096 	beq.w	8002006 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eda:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_GPIO_Init+0x298>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_GPIO_Init+0x298>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6193      	str	r3, [r2, #24]
 8001ee6:	4b56      	ldr	r3, [pc, #344]	; (8002040 <HAL_GPIO_Init+0x298>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ef2:	4a54      	ldr	r2, [pc, #336]	; (8002044 <HAL_GPIO_Init+0x29c>)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x2a0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x19e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_GPIO_Init+0x2a4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x19a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a49      	ldr	r2, [pc, #292]	; (8002050 <HAL_GPIO_Init+0x2a8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x196>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a48      	ldr	r2, [pc, #288]	; (8002054 <HAL_GPIO_Init+0x2ac>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x192>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x1a0>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x1a0>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x1a0>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x1a0>
 8001f46:	2300      	movs	r3, #0
 8001f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f58:	493a      	ldr	r1, [pc, #232]	; (8002044 <HAL_GPIO_Init+0x29c>)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4938      	ldr	r1, [pc, #224]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
 8001f7e:	e006      	b.n	8001f8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f80:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	4933      	ldr	r1, [pc, #204]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	492e      	ldr	r1, [pc, #184]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
 8001fa6:	e006      	b.n	8001fb6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	4929      	ldr	r1, [pc, #164]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	4924      	ldr	r1, [pc, #144]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	491f      	ldr	r1, [pc, #124]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fea:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	491a      	ldr	r1, [pc, #104]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60cb      	str	r3, [r1, #12]
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4915      	ldr	r1, [pc, #84]	; (8002058 <HAL_GPIO_Init+0x2b0>)
 8002002:	4013      	ands	r3, r2
 8002004:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	3301      	adds	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f aed0 	bne.w	8001dbc <HAL_GPIO_Init+0x14>
  }
}
 800201c:	bf00      	nop
 800201e:	372c      	adds	r7, #44	; 0x2c
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	10210000 	.word	0x10210000
 800202c:	10110000 	.word	0x10110000
 8002030:	10120000 	.word	0x10120000
 8002034:	10310000 	.word	0x10310000
 8002038:	10320000 	.word	0x10320000
 800203c:	10220000 	.word	0x10220000
 8002040:	40021000 	.word	0x40021000
 8002044:	40010000 	.word	0x40010000
 8002048:	40010800 	.word	0x40010800
 800204c:	40010c00 	.word	0x40010c00
 8002050:	40011000 	.word	0x40011000
 8002054:	40011400 	.word	0x40011400
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	807b      	strh	r3, [r7, #2]
 8002096:	4613      	mov	r3, r2
 8002098:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209a:	787b      	ldrb	r3, [r7, #1]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a0:	887a      	ldrh	r2, [r7, #2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	041a      	lsls	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	611a      	str	r2, [r3, #16]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020cc:	887a      	ldrh	r2, [r7, #2]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	400b      	ands	r3, r1
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_PWR_EnableBkUpAccess+0x14>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	420e0020 	.word	0x420e0020

08002104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e26c      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8087 	beq.w	8002232 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002124:	4b92      	ldr	r3, [pc, #584]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b04      	cmp	r3, #4
 800212e:	d00c      	beq.n	800214a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002130:	4b8f      	ldr	r3, [pc, #572]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d112      	bne.n	8002162 <HAL_RCC_OscConfig+0x5e>
 800213c:	4b8c      	ldr	r3, [pc, #560]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d10b      	bne.n	8002162 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06c      	beq.n	8002230 <HAL_RCC_OscConfig+0x12c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d168      	bne.n	8002230 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e246      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x76>
 800216c:	4b80      	ldr	r3, [pc, #512]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a7f      	ldr	r2, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e02e      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x98>
 8002182:	4b7b      	ldr	r3, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7a      	ldr	r2, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b78      	ldr	r3, [pc, #480]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a77      	ldr	r2, [pc, #476]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e01d      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0xbc>
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a71      	ldr	r2, [pc, #452]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6e      	ldr	r2, [pc, #440]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 80021c0:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a67      	ldr	r2, [pc, #412]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d013      	beq.n	8002208 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff f8aa 	bl	8001338 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff f8a6 	bl	8001338 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1fa      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe4>
 8002206:	e014      	b.n	8002232 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff f896 	bl	8001338 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff f892 	bl	8001338 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1e6      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x10c>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d063      	beq.n	8002306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223e:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b08      	cmp	r3, #8
 8002254:	d11c      	bne.n	8002290 <HAL_RCC_OscConfig+0x18c>
 8002256:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x176>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e1ba      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4939      	ldr	r1, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	e03a      	b.n	8002306 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x270>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff f84b 	bl	8001338 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a6:	f7ff f847 	bl	8001338 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e19b      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4927      	ldr	r1, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	e015      	b.n	8002306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_RCC_OscConfig+0x270>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff f82a 	bl	8001338 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7ff f826 	bl	8001338 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e17a      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03a      	beq.n	8002388 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d019      	beq.n	800234e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_RCC_OscConfig+0x274>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff f80a 	bl	8001338 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff f806 	bl	8001338 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e15a      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f000 fac6 	bl	80028d8 <RCC_Delay>
 800234c:	e01c      	b.n	8002388 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x274>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7fe fff0 	bl	8001338 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe ffec 	bl	8001338 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d908      	bls.n	800237c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e140      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	42420000 	.word	0x42420000
 8002378:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b9e      	ldr	r3, [pc, #632]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e9      	bne.n	800235c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a6 	beq.w	80024e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b97      	ldr	r3, [pc, #604]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	4b94      	ldr	r3, [pc, #592]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a93      	ldr	r2, [pc, #588]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]
 80023b2:	4b91      	ldr	r3, [pc, #580]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b8e      	ldr	r3, [pc, #568]	; (80025fc <HAL_RCC_OscConfig+0x4f8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b8b      	ldr	r3, [pc, #556]	; (80025fc <HAL_RCC_OscConfig+0x4f8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a8a      	ldr	r2, [pc, #552]	; (80025fc <HAL_RCC_OscConfig+0x4f8>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7fe ffad 	bl	8001338 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe ffa9 	bl	8001338 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0fd      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x4f8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x312>
 8002408:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e02d      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x334>
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a75      	ldr	r2, [pc, #468]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4b73      	ldr	r3, [pc, #460]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a72      	ldr	r2, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e01c      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0x356>
 8002440:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a6c      	ldr	r2, [pc, #432]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a69      	ldr	r2, [pc, #420]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e00b      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 800245a:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a66      	ldr	r2, [pc, #408]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a63      	ldr	r2, [pc, #396]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d015      	beq.n	80024a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe ff5d 	bl	8001338 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe ff59 	bl	8001338 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0ab      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ee      	beq.n	8002482 <HAL_RCC_OscConfig+0x37e>
 80024a4:	e014      	b.n	80024d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7fe ff47 	bl	8001338 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe ff43 	bl	8001338 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e095      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ee      	bne.n	80024ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4b48      	ldr	r3, [pc, #288]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a47      	ldr	r2, [pc, #284]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8081 	beq.w	80025ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ec:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d061      	beq.n	80025bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d146      	bne.n	800258e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002500:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_OscConfig+0x4fc>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe ff17 	bl	8001338 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe ff13 	bl	8001338 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e067      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002520:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d108      	bne.n	8002548 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	492d      	ldr	r1, [pc, #180]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a19      	ldr	r1, [r3, #32]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	430b      	orrs	r3, r1
 800255a:	4927      	ldr	r1, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_OscConfig+0x4fc>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fee7 	bl	8001338 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fee3 	bl	8001338 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e037      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x46a>
 800258c:	e02f      	b.n	80025ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_RCC_OscConfig+0x4fc>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fed0 	bl	8001338 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fecc 	bl	8001338 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e020      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x498>
 80025ba:	e018      	b.n	80025ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e013      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
 8002600:	42420060 	.word	0x42420060

08002604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0d0      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b6a      	ldr	r3, [pc, #424]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d910      	bls.n	8002648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0207 	bic.w	r2, r3, #7
 800262e:	4965      	ldr	r1, [pc, #404]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0b8      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002660:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800266a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	494d      	ldr	r1, [pc, #308]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d040      	beq.n	8002724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d115      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e073      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06b      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4936      	ldr	r1, [pc, #216]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fe20 	bl	8001338 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fe1c 	bl	8001338 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e053      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d210      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4922      	ldr	r1, [pc, #136]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e032      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4916      	ldr	r1, [pc, #88]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002792:	f000 f821 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	fa21 f303 	lsr.w	r3, r1, r3
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1cc>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1d0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fd7e 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08003d28 	.word	0x08003d28
 80027d0:	20000018 	.word	0x20000018
 80027d4:	2000001c 	.word	0x2000001c

080027d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	b490      	push	{r4, r7}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027de:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027e0:	1d3c      	adds	r4, r7, #4
 80027e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b04      	cmp	r3, #4
 8002810:	d002      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x40>
 8002812:	2b08      	cmp	r3, #8
 8002814:	d003      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x46>
 8002816:	e02d      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_RCC_GetSysClockFreq+0xbc>)
 800281a:	623b      	str	r3, [r7, #32]
      break;
 800281c:	e02d      	b.n	800287a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800282a:	4413      	add	r3, r2
 800282c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002830:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	0c5b      	lsrs	r3, r3, #17
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800284a:	4413      	add	r3, r2
 800284c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002850:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002856:	fb02 f203 	mul.w	r2, r2, r3
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	e004      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	623b      	str	r3, [r7, #32]
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002876:	623b      	str	r3, [r7, #32]
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6a3b      	ldr	r3, [r7, #32]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bc90      	pop	{r4, r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	08003d00 	.word	0x08003d00
 800288c:	08003d10 	.word	0x08003d10
 8002890:	40021000 	.word	0x40021000
 8002894:	007a1200 	.word	0x007a1200
 8002898:	003d0900 	.word	0x003d0900

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <HAL_RCC_GetHCLKFreq+0x10>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	20000018 	.word	0x20000018

080028b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b4:	f7ff fff2 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028b8:	4601      	mov	r1, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	0adb      	lsrs	r3, r3, #11
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
 80028c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08003d38 	.word	0x08003d38

080028d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <RCC_Delay+0x34>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <RCC_Delay+0x38>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0a5b      	lsrs	r3, r3, #9
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f4:	bf00      	nop
  }
  while (Delay --);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1e5a      	subs	r2, r3, #1
 80028fa:	60fa      	str	r2, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f9      	bne.n	80028f4 <RCC_Delay+0x1c>
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000018 	.word	0x20000018
 8002910:	10624dd3 	.word	0x10624dd3

08002914 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d07d      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002934:	4b4f      	ldr	r3, [pc, #316]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	61d3      	str	r3, [r2, #28]
 800294c:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002958:	2301      	movs	r3, #1
 800295a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002968:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002974:	f7fe fce0 	bl	8001338 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	e008      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fe fcdc 	bl	8001338 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e06d      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	4b3a      	ldr	r3, [pc, #232]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800299a:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02e      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d027      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b8:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ce:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d014      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe fcab 	bl	8001338 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe fca7 	bl	8001338 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e036      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ee      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4917      	ldr	r1, [pc, #92]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	490b      	ldr	r1, [pc, #44]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	4904      	ldr	r1, [pc, #16]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	42420440 	.word	0x42420440

08002a80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b08d      	sub	sp, #52	; 0x34
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a88:	4b55      	ldr	r3, [pc, #340]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a8a:	f107 040c 	add.w	r4, r7, #12
 8002a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d07f      	beq.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d002      	beq.n	8002abe <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d048      	beq.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002abc:	e08b      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ac4:	4b48      	ldr	r3, [pc, #288]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d07f      	beq.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002adc:	4413      	add	r3, r2
 8002ade:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ae2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d018      	beq.n	8002b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	0c5b      	lsrs	r3, r3, #17
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002afc:	4413      	add	r3, r2
 8002afe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00d      	beq.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b0e:	4a37      	ldr	r2, [pc, #220]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1e:	e004      	b.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	4a33      	ldr	r2, [pc, #204]	; (8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b36:	d102      	bne.n	8002b3e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b3c:	e048      	b.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4a2c      	ldr	r2, [pc, #176]	; (8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b4c:	e040      	b.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5e:	d108      	bne.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b70:	e01f      	b.n	8002bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002b8a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b90:	e00f      	b.n	8002bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b9c:	d11a      	bne.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d014      	beq.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002baa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002bb0:	e010      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bb4:	f7ff fe7c 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	0b9b      	lsrs	r3, r3, #14
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002bd0:	bf00      	nop
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002bd4:	bf00      	nop
    }
  }
  return (frequency);
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3734      	adds	r7, #52	; 0x34
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	08003d14 	.word	0x08003d14
 8002be4:	08003d24 	.word	0x08003d24
 8002be8:	40021000 	.word	0x40021000
 8002bec:	007a1200 	.word	0x007a1200
 8002bf0:	003d0900 	.word	0x003d0900
 8002bf4:	aaaaaaab 	.word	0xaaaaaaab

08002bf8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e084      	b.n	8002d18 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7c5b      	ldrb	r3, [r3, #17]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe f92c 	bl	8000e7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 faa0 	bl	8003170 <HAL_RTC_WaitForSynchro>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d004      	beq.n	8002c40 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e06b      	b.n	8002d18 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fb59 	bl	80032f8 <RTC_EnterInitMode>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e060      	b.n	8002d18 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0207 	bic.w	r2, r2, #7
 8002c64:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002c6e:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_RTC_Init+0x128>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a2b      	ldr	r2, [pc, #172]	; (8002d20 <HAL_RTC_Init+0x128>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RTC_Init+0x128>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	4926      	ldr	r1, [pc, #152]	; (8002d20 <HAL_RTC_Init+0x128>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d003      	beq.n	8002c9e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e00e      	b.n	8002cbc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f7ff feee 	bl	8002a80 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ca4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e030      	b.n	8002d18 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 010f 	bic.w	r1, r3, #15
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	0c1a      	lsrs	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	b291      	uxth	r1, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fb2d 	bl	8003348 <RTC_ExitInitMode>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00c      	b.n	8002d18 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40006c00 	.word	0x40006c00

08002d24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_RTC_SetTime+0x20>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e080      	b.n	8002e4a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	7c1b      	ldrb	r3, [r3, #16]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_RTC_SetTime+0x30>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e07a      	b.n	8002e4a <HAL_RTC_SetTime+0x126>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002d70:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a5b      	subs	r3, r3, r1
 8002d80:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d82:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002d88:	4413      	add	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e01e      	b.n	8002dcc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fb1d 	bl	80033d2 <RTC_Bcd2ToByte>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002da0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fb12 	bl	80033d2 <RTC_Bcd2ToByte>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002dba:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	789b      	ldrb	r3, [r3, #2]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fb06 	bl	80033d2 <RTC_Bcd2ToByte>
 8002dc6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002dc8:	4423      	add	r3, r4
 8002dca:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fa2b 	bl	800322a <RTC_WriteTimeCounter>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e02f      	b.n	8002e4a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0205 	bic.w	r2, r2, #5
 8002df8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa3c 	bl	8003278 <RTC_ReadAlarmCounter>
 8002e00:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d018      	beq.n	8002e3c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d214      	bcs.n	8002e3c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002e18:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e1c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e1e:	6939      	ldr	r1, [r7, #16]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fa42 	bl	80032aa <RTC_WriteAlarmCounter>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e006      	b.n	8002e4a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}
	...

08002e54 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_RTC_GetTime+0x28>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b5      	b.n	8002fec <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0ac      	b.n	8002fec <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f999 	bl	80031ca <RTC_ReadTimeCounter>
 8002e98:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_RTC_GetTime+0x1a0>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0adb      	lsrs	r3, r3, #11
 8002ea4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4b52      	ldr	r3, [pc, #328]	; (8002ff4 <HAL_RTC_GetTime+0x1a0>)
 8002eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8002eae:	0adb      	lsrs	r3, r3, #11
 8002eb0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	4a4f      	ldr	r2, [pc, #316]	; (8002ff8 <HAL_RTC_GetTime+0x1a4>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4a4a      	ldr	r2, [pc, #296]	; (8002ff4 <HAL_RTC_GetTime+0x1a0>)
 8002ecc:	fba2 1203 	umull	r1, r2, r2, r3
 8002ed0:	0ad2      	lsrs	r2, r2, #11
 8002ed2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002ed6:	fb01 f202 	mul.w	r2, r1, r2
 8002eda:	1a9a      	subs	r2, r3, r2
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <HAL_RTC_GetTime+0x1a4>)
 8002ede:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee2:	0959      	lsrs	r1, r3, #5
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a5b      	subs	r3, r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	1ad1      	subs	r1, r2, r3
 8002eee:	b2ca      	uxtb	r2, r1
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b17      	cmp	r3, #23
 8002ef8:	d955      	bls.n	8002fa6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4a3f      	ldr	r2, [pc, #252]	; (8002ffc <HAL_RTC_GetTime+0x1a8>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002f06:	6939      	ldr	r1, [r7, #16]
 8002f08:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_RTC_GetTime+0x1a8>)
 8002f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0e:	091a      	lsrs	r2, r3, #4
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1aca      	subs	r2, r1, r3
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f9a9 	bl	8003278 <RTC_ReadAlarmCounter>
 8002f26:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d008      	beq.n	8002f42 <HAL_RTC_GetTime+0xee>
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d904      	bls.n	8002f42 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e002      	b.n	8002f48 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	; (8003000 <HAL_RTC_GetTime+0x1ac>)
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f966 	bl	800322a <RTC_WriteTimeCounter>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e041      	b.n	8002fec <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d00c      	beq.n	8002f8a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4413      	add	r3, r2
 8002f76:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f78:	69f9      	ldr	r1, [r7, #28]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f995 	bl	80032aa <RTC_WriteAlarmCounter>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e030      	b.n	8002fec <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f8a:	69f9      	ldr	r1, [r7, #28]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f98c 	bl	80032aa <RTC_WriteAlarmCounter>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e027      	b.n	8002fec <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002f9c:	6979      	ldr	r1, [r7, #20]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fa34 	bl	800340c <RTC_DateUpdate>
 8002fa4:	e003      	b.n	8002fae <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01a      	beq.n	8002fea <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f9ed 	bl	8003398 <RTC_ByteToBcd2>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f9e4 	bl	8003398 <RTC_ByteToBcd2>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	789b      	ldrb	r3, [r3, #2]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f9db 	bl	8003398 <RTC_ByteToBcd2>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	91a2b3c5 	.word	0x91a2b3c5
 8002ff8:	88888889 	.word	0x88888889
 8002ffc:	aaaaaaab 	.word	0xaaaaaaab
 8003000:	00015180 	.word	0x00015180

08003004 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_RTC_SetDate+0x24>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e097      	b.n	800315c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	7c1b      	ldrb	r3, [r3, #16]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_RTC_SetDate+0x34>
 8003034:	2302      	movs	r3, #2
 8003036:	e091      	b.n	800315c <HAL_RTC_SetDate+0x158>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2202      	movs	r2, #2
 8003042:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10c      	bne.n	8003064 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	78da      	ldrb	r2, [r3, #3]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785a      	ldrb	r2, [r3, #1]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	789a      	ldrb	r2, [r3, #2]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	739a      	strb	r2, [r3, #14]
 8003062:	e01a      	b.n	800309a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f9b2 	bl	80033d2 <RTC_Bcd2ToByte>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f9a9 	bl	80033d2 <RTC_Bcd2ToByte>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	789b      	ldrb	r3, [r3, #2]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f9a0 	bl	80033d2 <RTC_Bcd2ToByte>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	7bdb      	ldrb	r3, [r3, #15]
 800309e:	4618      	mov	r0, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	7b59      	ldrb	r1, [r3, #13]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	7b9b      	ldrb	r3, [r3, #14]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f000 fa8b 	bl	80035c4 <RTC_WeekDayNum>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	7b1a      	ldrb	r2, [r3, #12]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f883 	bl	80031ca <RTC_ReadTimeCounter>
 80030c4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4a26      	ldr	r2, [pc, #152]	; (8003164 <HAL_RTC_SetDate+0x160>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0adb      	lsrs	r3, r3, #11
 80030d0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b18      	cmp	r3, #24
 80030d6:	d93a      	bls.n	800314e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	4a23      	ldr	r2, [pc, #140]	; (8003168 <HAL_RTC_SetDate+0x164>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_RTC_SetDate+0x168>)
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80030ee:	69f9      	ldr	r1, [r7, #28]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f89a 	bl	800322a <RTC_WriteTimeCounter>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2204      	movs	r2, #4
 8003100:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e027      	b.n	800315c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f8b3 	bl	8003278 <RTC_ReadAlarmCounter>
 8003112:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d018      	beq.n	800314e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	429a      	cmp	r2, r3
 8003122:	d214      	bcs.n	800314e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800312a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800312e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f8b9 	bl	80032aa <RTC_WriteAlarmCounter>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2204      	movs	r2, #4
 8003142:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e006      	b.n	800315c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	91a2b3c5 	.word	0x91a2b3c5
 8003168:	aaaaaaab 	.word	0xaaaaaaab
 800316c:	00015180 	.word	0x00015180

08003170 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e01d      	b.n	80031c2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0208 	bic.w	r2, r2, #8
 8003194:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003196:	f7fe f8cf 	bl	8001338 <HAL_GetTick>
 800319a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800319c:	e009      	b.n	80031b2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800319e:	f7fe f8cb 	bl	8001338 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ac:	d901      	bls.n	80031b2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e007      	b.n	80031c2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ee      	beq.n	800319e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b087      	sub	sp, #28
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	827b      	strh	r3, [r7, #18]
 80031d6:	2300      	movs	r3, #0
 80031d8:	823b      	strh	r3, [r7, #16]
 80031da:	2300      	movs	r3, #0
 80031dc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80031fa:	8a7a      	ldrh	r2, [r7, #18]
 80031fc:	8a3b      	ldrh	r3, [r7, #16]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d008      	beq.n	8003214 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003202:	8a3b      	ldrh	r3, [r7, #16]
 8003204:	041a      	lsls	r2, r3, #16
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	b29b      	uxth	r3, r3
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e004      	b.n	800321e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003214:	8a7b      	ldrh	r3, [r7, #18]
 8003216:	041a      	lsls	r2, r3, #16
 8003218:	89fb      	ldrh	r3, [r7, #14]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800321e:	697b      	ldr	r3, [r7, #20]
}
 8003220:	4618      	mov	r0, r3
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f85d 	bl	80032f8 <RTC_EnterInitMode>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e011      	b.n	800326e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	0c12      	lsrs	r2, r2, #16
 8003252:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	b292      	uxth	r2, r2
 800325c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f872 	bl	8003348 <RTC_ExitInitMode>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	81fb      	strh	r3, [r7, #14]
 8003284:	2300      	movs	r3, #0
 8003286:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003298:	89fb      	ldrh	r3, [r7, #14]
 800329a:	041a      	lsls	r2, r3, #16
 800329c:	89bb      	ldrh	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f81d 	bl	80032f8 <RTC_EnterInitMode>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e011      	b.n	80032ee <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	0c12      	lsrs	r2, r2, #16
 80032d2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	b292      	uxth	r2, r2
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f832 	bl	8003348 <RTC_ExitInitMode>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003304:	f7fe f818 	bl	8001338 <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800330a:	e009      	b.n	8003320 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800330c:	f7fe f814 	bl	8001338 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331a:	d901      	bls.n	8003320 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e00f      	b.n	8003340 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ee      	beq.n	800330c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0210 	orr.w	r2, r2, #16
 800333c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0210 	bic.w	r2, r2, #16
 8003362:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003364:	f7fd ffe8 	bl	8001338 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800336a:	e009      	b.n	8003380 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800336c:	f7fd ffe4 	bl	8001338 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337a:	d901      	bls.n	8003380 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e007      	b.n	8003390 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ee      	beq.n	800336c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80033a6:	e005      	b.n	80033b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	3b0a      	subs	r3, #10
 80033b2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	d8f6      	bhi.n	80033a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	b2db      	uxtb	r3, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4413      	add	r3, r2
 8003400:	b2db      	uxtb	r3, r3
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7bdb      	ldrb	r3, [r3, #15]
 800342a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7b5b      	ldrb	r3, [r3, #13]
 8003430:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	7b9b      	ldrb	r3, [r3, #14]
 8003436:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	e06f      	b.n	800351e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d011      	beq.n	8003468 <RTC_DateUpdate+0x5c>
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d00e      	beq.n	8003468 <RTC_DateUpdate+0x5c>
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b05      	cmp	r3, #5
 800344e:	d00b      	beq.n	8003468 <RTC_DateUpdate+0x5c>
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b07      	cmp	r3, #7
 8003454:	d008      	beq.n	8003468 <RTC_DateUpdate+0x5c>
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d005      	beq.n	8003468 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0a      	cmp	r3, #10
 8003460:	d002      	beq.n	8003468 <RTC_DateUpdate+0x5c>
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d117      	bne.n	8003498 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b1e      	cmp	r3, #30
 800346c:	d803      	bhi.n	8003476 <RTC_DateUpdate+0x6a>
      {
        day++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3301      	adds	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003474:	e050      	b.n	8003518 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b0c      	cmp	r3, #12
 800347a:	d005      	beq.n	8003488 <RTC_DateUpdate+0x7c>
        {
          month++;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	3301      	adds	r3, #1
 8003480:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003482:	2301      	movs	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003486:	e047      	b.n	8003518 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003488:	2301      	movs	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800348c:	2301      	movs	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
          year++;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	3301      	adds	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003496:	e03f      	b.n	8003518 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b04      	cmp	r3, #4
 800349c:	d008      	beq.n	80034b0 <RTC_DateUpdate+0xa4>
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b06      	cmp	r3, #6
 80034a2:	d005      	beq.n	80034b0 <RTC_DateUpdate+0xa4>
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	d002      	beq.n	80034b0 <RTC_DateUpdate+0xa4>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b0b      	cmp	r3, #11
 80034ae:	d10c      	bne.n	80034ca <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b1d      	cmp	r3, #29
 80034b4:	d803      	bhi.n	80034be <RTC_DateUpdate+0xb2>
      {
        day++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3301      	adds	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80034bc:	e02c      	b.n	8003518 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	3301      	adds	r3, #1
 80034c2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80034c4:	2301      	movs	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80034c8:	e026      	b.n	8003518 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d123      	bne.n	8003518 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b1b      	cmp	r3, #27
 80034d4:	d803      	bhi.n	80034de <RTC_DateUpdate+0xd2>
      {
        day++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3301      	adds	r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e01c      	b.n	8003518 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b1c      	cmp	r3, #28
 80034e2:	d111      	bne.n	8003508 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f839 	bl	8003560 <RTC_IsLeapYear>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <RTC_DateUpdate+0xf0>
        {
          day++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e00d      	b.n	8003518 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	3301      	adds	r3, #1
 8003500:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003502:	2301      	movs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e007      	b.n	8003518 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b1d      	cmp	r3, #29
 800350c:	d104      	bne.n	8003518 <RTC_DateUpdate+0x10c>
      {
        month++;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	3301      	adds	r3, #1
 8003512:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3301      	adds	r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d38b      	bcc.n	800343e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	4619      	mov	r1, r3
 8003548:	6978      	ldr	r0, [r7, #20]
 800354a:	f000 f83b 	bl	80035c4 <RTC_WeekDayNum>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	731a      	strb	r2, [r3, #12]
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	e01d      	b.n	80035b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <RTC_IsLeapYear+0x60>)
 800357e:	fba2 1203 	umull	r1, r2, r2, r3
 8003582:	0952      	lsrs	r2, r2, #5
 8003584:	2164      	movs	r1, #100	; 0x64
 8003586:	fb01 f202 	mul.w	r2, r1, r2
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003592:	2301      	movs	r3, #1
 8003594:	e00f      	b.n	80035b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <RTC_IsLeapYear+0x60>)
 800359a:	fba2 1203 	umull	r1, r2, r2, r3
 800359e:	09d2      	lsrs	r2, r2, #7
 80035a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80035a4:	fb01 f202 	mul.w	r2, r1, r2
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80035b4:	2300      	movs	r3, #0
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	51eb851f 	.word	0x51eb851f

080035c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
 80035d0:	4613      	mov	r3, r2
 80035d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80035e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d82d      	bhi.n	8003646 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <RTC_WeekDayNum+0xe4>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	085a      	lsrs	r2, r3, #1
 80035fe:	78bb      	ldrb	r3, [r7, #2]
 8003600:	441a      	add	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	441a      	add	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3b01      	subs	r3, #1
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3b01      	subs	r3, #1
 8003612:	4926      	ldr	r1, [pc, #152]	; (80036ac <RTC_WeekDayNum+0xe8>)
 8003614:	fba1 1303 	umull	r1, r3, r1, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	1ad2      	subs	r2, r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	3b01      	subs	r3, #1
 8003620:	4922      	ldr	r1, [pc, #136]	; (80036ac <RTC_WeekDayNum+0xe8>)
 8003622:	fba1 1303 	umull	r1, r3, r1, r3
 8003626:	09db      	lsrs	r3, r3, #7
 8003628:	4413      	add	r3, r2
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <RTC_WeekDayNum+0xec>)
 800362e:	fba3 1302 	umull	r1, r3, r3, r2
 8003632:	1ad1      	subs	r1, r2, r3
 8003634:	0849      	lsrs	r1, r1, #1
 8003636:	440b      	add	r3, r1
 8003638:	0899      	lsrs	r1, r3, #2
 800363a:	460b      	mov	r3, r1
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	1a5b      	subs	r3, r3, r1
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e029      	b.n	800369a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <RTC_WeekDayNum+0xe4>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	085a      	lsrs	r2, r3, #1
 800365a:	78bb      	ldrb	r3, [r7, #2]
 800365c:	441a      	add	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	441a      	add	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	441a      	add	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4910      	ldr	r1, [pc, #64]	; (80036ac <RTC_WeekDayNum+0xe8>)
 800366c:	fba1 1303 	umull	r1, r3, r1, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	1ad2      	subs	r2, r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	490d      	ldr	r1, [pc, #52]	; (80036ac <RTC_WeekDayNum+0xe8>)
 8003678:	fba1 1303 	umull	r1, r3, r1, r3
 800367c:	09db      	lsrs	r3, r3, #7
 800367e:	4413      	add	r3, r2
 8003680:	1c9a      	adds	r2, r3, #2
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <RTC_WeekDayNum+0xec>)
 8003684:	fba3 1302 	umull	r1, r3, r3, r2
 8003688:	1ad1      	subs	r1, r2, r3
 800368a:	0849      	lsrs	r1, r1, #1
 800368c:	440b      	add	r3, r1
 800368e:	0899      	lsrs	r1, r3, #2
 8003690:	460b      	mov	r3, r1
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	1a5b      	subs	r3, r3, r1
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	b2db      	uxtb	r3, r3
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	38e38e39 	.word	0x38e38e39
 80036ac:	51eb851f 	.word	0x51eb851f
 80036b0:	24924925 	.word	0x24924925

080036b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e076      	b.n	80037b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d108      	bne.n	80036e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d6:	d009      	beq.n	80036ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	61da      	str	r2, [r3, #28]
 80036de:	e005      	b.n	80036ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fbdc 	bl	8000ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003722:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	ea42 0103 	orr.w	r1, r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	0c1a      	lsrs	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f002 0204 	and.w	r2, r2, #4
 8003792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_SPI_Transmit+0x22>
 80037da:	2302      	movs	r3, #2
 80037dc:	e126      	b.n	8003a2c <HAL_SPI_Transmit+0x270>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037e6:	f7fd fda7 	bl	8001338 <HAL_GetTick>
 80037ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
 80037fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003800:	e10b      	b.n	8003a1a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_SPI_Transmit+0x52>
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003812:	e102      	b.n	8003a1a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2203      	movs	r2, #3
 8003818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385a:	d10f      	bne.n	800387c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800387a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d007      	beq.n	800389a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003898:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a2:	d14b      	bne.n	800393c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_SPI_Transmit+0xf6>
 80038ac:	8afb      	ldrh	r3, [r7, #22]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d13e      	bne.n	8003930 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	881a      	ldrh	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	1c9a      	adds	r2, r3, #2
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038d6:	e02b      	b.n	8003930 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d112      	bne.n	800390c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	86da      	strh	r2, [r3, #54]	; 0x36
 800390a:	e011      	b.n	8003930 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800390c:	f7fd fd14 	bl	8001338 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d803      	bhi.n	8003924 <HAL_SPI_Transmit+0x168>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d102      	bne.n	800392a <HAL_SPI_Transmit+0x16e>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800392e:	e074      	b.n	8003a1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ce      	bne.n	80038d8 <HAL_SPI_Transmit+0x11c>
 800393a:	e04c      	b.n	80039d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_SPI_Transmit+0x18e>
 8003944:	8afb      	ldrh	r3, [r7, #22]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d140      	bne.n	80039cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003970:	e02c      	b.n	80039cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b02      	cmp	r3, #2
 800397e:	d113      	bne.n	80039a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	7812      	ldrb	r2, [r2, #0]
 800398c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80039a6:	e011      	b.n	80039cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a8:	f7fd fcc6 	bl	8001338 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d803      	bhi.n	80039c0 <HAL_SPI_Transmit+0x204>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d102      	bne.n	80039c6 <HAL_SPI_Transmit+0x20a>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039ca:	e026      	b.n	8003a1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1cd      	bne.n	8003972 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f8b2 	bl	8003b44 <SPI_EndRxTxTransaction>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e000      	b.n	8003a1a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a44:	f7fd fc78 	bl	8001338 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a54:	f7fd fc70 	bl	8001338 <HAL_GetTick>
 8003a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a5a:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	015b      	lsls	r3, r3, #5
 8003a60:	0d1b      	lsrs	r3, r3, #20
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a6a:	e054      	b.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d050      	beq.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a74:	f7fd fc60 	bl	8001338 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d902      	bls.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d13d      	bne.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa2:	d111      	bne.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aac:	d004      	beq.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	d107      	bne.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad0:	d10f      	bne.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e017      	b.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	bf0c      	ite	eq
 8003b26:	2301      	moveq	r3, #1
 8003b28:	2300      	movne	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d19b      	bne.n	8003a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000018 	.word	0x20000018

08003b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff ff6a 	bl	8003a34 <SPI_WaitFlagStateUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e000      	b.n	8003b78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <calloc>:
 8003b80:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <calloc+0xc>)
 8003b82:	460a      	mov	r2, r1
 8003b84:	4601      	mov	r1, r0
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	f000 b834 	b.w	8003bf4 <_calloc_r>
 8003b8c:	20000024 	.word	0x20000024

08003b90 <__errno>:
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <__errno+0x8>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000024 	.word	0x20000024

08003b9c <__libc_init_array>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	4e0c      	ldr	r6, [pc, #48]	; (8003bd4 <__libc_init_array+0x38>)
 8003ba2:	4c0d      	ldr	r4, [pc, #52]	; (8003bd8 <__libc_init_array+0x3c>)
 8003ba4:	1ba4      	subs	r4, r4, r6
 8003ba6:	10a4      	asrs	r4, r4, #2
 8003ba8:	42a5      	cmp	r5, r4
 8003baa:	d109      	bne.n	8003bc0 <__libc_init_array+0x24>
 8003bac:	f000 f89c 	bl	8003ce8 <_init>
 8003bb0:	2500      	movs	r5, #0
 8003bb2:	4e0a      	ldr	r6, [pc, #40]	; (8003bdc <__libc_init_array+0x40>)
 8003bb4:	4c0a      	ldr	r4, [pc, #40]	; (8003be0 <__libc_init_array+0x44>)
 8003bb6:	1ba4      	subs	r4, r4, r6
 8003bb8:	10a4      	asrs	r4, r4, #2
 8003bba:	42a5      	cmp	r5, r4
 8003bbc:	d105      	bne.n	8003bca <__libc_init_array+0x2e>
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bc4:	4798      	blx	r3
 8003bc6:	3501      	adds	r5, #1
 8003bc8:	e7ee      	b.n	8003ba8 <__libc_init_array+0xc>
 8003bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bce:	4798      	blx	r3
 8003bd0:	3501      	adds	r5, #1
 8003bd2:	e7f2      	b.n	8003bba <__libc_init_array+0x1e>
 8003bd4:	08003d40 	.word	0x08003d40
 8003bd8:	08003d40 	.word	0x08003d40
 8003bdc:	08003d40 	.word	0x08003d40
 8003be0:	08003d44 	.word	0x08003d44

08003be4 <memset>:
 8003be4:	4603      	mov	r3, r0
 8003be6:	4402      	add	r2, r0
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d100      	bne.n	8003bee <memset+0xa>
 8003bec:	4770      	bx	lr
 8003bee:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf2:	e7f9      	b.n	8003be8 <memset+0x4>

08003bf4 <_calloc_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	fb02 f401 	mul.w	r4, r2, r1
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	f000 f808 	bl	8003c10 <_malloc_r>
 8003c00:	4605      	mov	r5, r0
 8003c02:	b118      	cbz	r0, 8003c0c <_calloc_r+0x18>
 8003c04:	4622      	mov	r2, r4
 8003c06:	2100      	movs	r1, #0
 8003c08:	f7ff ffec 	bl	8003be4 <memset>
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}

08003c10 <_malloc_r>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	1ccd      	adds	r5, r1, #3
 8003c14:	f025 0503 	bic.w	r5, r5, #3
 8003c18:	3508      	adds	r5, #8
 8003c1a:	2d0c      	cmp	r5, #12
 8003c1c:	bf38      	it	cc
 8003c1e:	250c      	movcc	r5, #12
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	4606      	mov	r6, r0
 8003c24:	db01      	blt.n	8003c2a <_malloc_r+0x1a>
 8003c26:	42a9      	cmp	r1, r5
 8003c28:	d903      	bls.n	8003c32 <_malloc_r+0x22>
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	2000      	movs	r0, #0
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	f000 f857 	bl	8003ce4 <__malloc_lock>
 8003c36:	4a21      	ldr	r2, [pc, #132]	; (8003cbc <_malloc_r+0xac>)
 8003c38:	6814      	ldr	r4, [r2, #0]
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	b991      	cbnz	r1, 8003c64 <_malloc_r+0x54>
 8003c3e:	4c20      	ldr	r4, [pc, #128]	; (8003cc0 <_malloc_r+0xb0>)
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	b91b      	cbnz	r3, 8003c4c <_malloc_r+0x3c>
 8003c44:	4630      	mov	r0, r6
 8003c46:	f000 f83d 	bl	8003cc4 <_sbrk_r>
 8003c4a:	6020      	str	r0, [r4, #0]
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f000 f838 	bl	8003cc4 <_sbrk_r>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d124      	bne.n	8003ca2 <_malloc_r+0x92>
 8003c58:	230c      	movs	r3, #12
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	f000 f842 	bl	8003ce6 <__malloc_unlock>
 8003c62:	e7e4      	b.n	8003c2e <_malloc_r+0x1e>
 8003c64:	680b      	ldr	r3, [r1, #0]
 8003c66:	1b5b      	subs	r3, r3, r5
 8003c68:	d418      	bmi.n	8003c9c <_malloc_r+0x8c>
 8003c6a:	2b0b      	cmp	r3, #11
 8003c6c:	d90f      	bls.n	8003c8e <_malloc_r+0x7e>
 8003c6e:	600b      	str	r3, [r1, #0]
 8003c70:	18cc      	adds	r4, r1, r3
 8003c72:	50cd      	str	r5, [r1, r3]
 8003c74:	4630      	mov	r0, r6
 8003c76:	f000 f836 	bl	8003ce6 <__malloc_unlock>
 8003c7a:	f104 000b 	add.w	r0, r4, #11
 8003c7e:	1d23      	adds	r3, r4, #4
 8003c80:	f020 0007 	bic.w	r0, r0, #7
 8003c84:	1ac3      	subs	r3, r0, r3
 8003c86:	d0d3      	beq.n	8003c30 <_malloc_r+0x20>
 8003c88:	425a      	negs	r2, r3
 8003c8a:	50e2      	str	r2, [r4, r3]
 8003c8c:	e7d0      	b.n	8003c30 <_malloc_r+0x20>
 8003c8e:	684b      	ldr	r3, [r1, #4]
 8003c90:	428c      	cmp	r4, r1
 8003c92:	bf16      	itet	ne
 8003c94:	6063      	strne	r3, [r4, #4]
 8003c96:	6013      	streq	r3, [r2, #0]
 8003c98:	460c      	movne	r4, r1
 8003c9a:	e7eb      	b.n	8003c74 <_malloc_r+0x64>
 8003c9c:	460c      	mov	r4, r1
 8003c9e:	6849      	ldr	r1, [r1, #4]
 8003ca0:	e7cc      	b.n	8003c3c <_malloc_r+0x2c>
 8003ca2:	1cc4      	adds	r4, r0, #3
 8003ca4:	f024 0403 	bic.w	r4, r4, #3
 8003ca8:	42a0      	cmp	r0, r4
 8003caa:	d005      	beq.n	8003cb8 <_malloc_r+0xa8>
 8003cac:	1a21      	subs	r1, r4, r0
 8003cae:	4630      	mov	r0, r6
 8003cb0:	f000 f808 	bl	8003cc4 <_sbrk_r>
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d0cf      	beq.n	8003c58 <_malloc_r+0x48>
 8003cb8:	6025      	str	r5, [r4, #0]
 8003cba:	e7db      	b.n	8003c74 <_malloc_r+0x64>
 8003cbc:	200000a8 	.word	0x200000a8
 8003cc0:	200000ac 	.word	0x200000ac

08003cc4 <_sbrk_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4c05      	ldr	r4, [pc, #20]	; (8003ce0 <_sbrk_r+0x1c>)
 8003cca:	4605      	mov	r5, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	f7fd f974 	bl	8000fbc <_sbrk>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_sbrk_r+0x1a>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_sbrk_r+0x1a>
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	200001a0 	.word	0x200001a0

08003ce4 <__malloc_lock>:
 8003ce4:	4770      	bx	lr

08003ce6 <__malloc_unlock>:
 8003ce6:	4770      	bx	lr

08003ce8 <_init>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	bf00      	nop
 8003cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cee:	bc08      	pop	{r3}
 8003cf0:	469e      	mov	lr, r3
 8003cf2:	4770      	bx	lr

08003cf4 <_fini>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr
